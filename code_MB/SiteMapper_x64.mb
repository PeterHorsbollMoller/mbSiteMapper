'*********************************************************
'  Name:  Site Mapper
'
'  Description:
'  The purpose of this tool is to assist the user create multiple maps based on all the objects in a specified table - "Site" table.
'  For example, the user may want a map of each Local Government Area or a map centred on points in a study area.
'  The tool automatically saves each map as a PDF, JPG or PNG to a specified output folder.
'
'  Each map is based on a template Mapper window or Layout window. If the user chooses to only use a template Mapper window, then the
'  tool will export the template Mapper window. If the user chooses a template Layout window then the tool export the Layout window.
'
'  The tool saves each export with a filename based on a column in the site table.
'
'  Options include to add the object from the site table to the mapper and label the object. For example, the template may contain only road and rail
'  layers and the tool can add the Local Government Boundary as a layer and label it with the Local Government Area name.
'
'  If the Layout template contains a text object with the word "<Title>" in it then the tool will replace the string <Title> with the string value from
'  a column in the site table. For example, the Layout may have a text string saying "Road Network in <Title> Map". The tool will change this to say
'  "Road Network in City of Yarra Map" where "City of Yarra" is the Local Government Area name in the site table. The tool can change this to proper case if required.
'
'  When the tool clones the Mapper window, it pans the map to the location of each record in the site table.
'  It can either retain the current map zoom, zoom to a specified zoom width, or zoom to the full extent of the objects (for lines and polygons)
'
'
'  Kalu Ribush,
'  Created Sept 2013
'  Updated Nov 2017 for Windows 16.0
'  Updated April 2019 Version 1.6
'  Updated Feb 2020 Version 1.7 - added function to include other attribute values from columns using Text Frame Names
'  Updated March 2021 Version 1.8 - Some tidying up
'
'  Peter Horsbøll Møller
'  Updated Oct 2021 version 2.0,
'		- added support for getting values from any column using a Smart Text calling a published function, MSFUNCGetSiteColumnValue
'		- added support for overview map, a secondary map
'		- a Site Layer can also be selected from the secondary map
'		- Settings are saved between session and reused across dialog openings, currently not the windows and site layers
'		- layouts and maps are no longer cloned, and the tool does not create a large number of map/layout windows. It changes the map selected
'		- Values in the Site ID column no longer need to unique. Records are grouped by the selected column
'		- Supports 3 naming types: Site ID, Counter or another Char column
'		- Support adding the SiteMapper control to Home, Layout and Custom tab
' Updated Nov 2021 version 2.1
'		- brought back support for cloning/keeping a copy of the maps/layouts on screen
'		- this also includes crystalizing smart text for accessing attribute data
'		- Fixed an issue where some controls weren't disabled as they should
'		- brought back support for using <COL#> in Frame Name to add attributes to the layout
'		- brought back delay before moving onto next site
'		- added support for waiting 1-3 secs before outputting the resulting map/layout
' Updated Nov 2021 version 2.1.1
'		- Added Error Handling to SiteMapper_x64.mb
'		- Improved error handling around filename column (char column)
'		- Fixed the issue of standalone maps not beeing created correctly
'		- Fixed an issue of using numeric site IDs
'		- Storing and retrieving last used windows and tables - still not used in Setup Dialog
'		- Setting for writing log details to message window added to Aboutbox
' Updated Nov 2021, version 2.1.2
'		- Added check for not open, non mappeable or empty child site table
' Updated Nov 2021, version 2.1.3
'		- Added Preferences dialog for managing log and ribbon position
'		- Added Help option to the application context menu to show PDF document
'*********************************************************

include "MAPBASIC.DEF"
Include "IMapInfoPro.def"
Include "Enums.def"

Include "Library\ARRAYLib.def"
Include "Library\COLUMNLib.def"
Include "Library\ConfigFileLib.def"
Include "Library\DEBUGLib.def"
Include "Library\ERRORLib.def"
Include "Library\FILELib.def"
Include "Library\RibbonElements.def"
Include "Library\RIBBONLib.def"
Include "Library\TABLELib.def"
Include "Library\MI_ICONS_X64.def"

Include "SMSDLG_SiteMapperSetup.def"
Include "SMPDLGSiteMapperPreferences.def"

Define PATH_IMAGES		ApplicationDirectory$() & "_Icons\"
Define xProgram 		"Site Mapper"
Define xVersion 		"2.1.3"
Define xYear			"2021"

Define FILE_INI		GetFolderPath$(FOLDER_MI_PREFERENCE) & "SiteMapper.ini"
Define FILE_HELP		ApplicationDirectory$() & "SiteMapper.pdf"
Define FILE_INI_RIBBON	ApplicationDirectory$() & "SiteMapperRibbon.ini"

Type LAYOUT_TEXT_FRAME
	nFrameID		As Integer
	sText		As String
	sSmartText	As String
	sFrameName	As String
	nColNumber	As Integer
End Type


declare Sub Main
declare Sub OpenDialog
declare Sub SMShowPrefDialog
declare Sub SMProcessMaps

Declare Sub PrepareMapForCurrentSite(	  ByVal nMID As integer
								, ByVal nSiteLayerID As Integer
								, ByVal sCurrentSiteTab As String
								, ByVal bAddCurrentSiteAsLayer As Logical
								, ByVal nZoomType As Integer
								, ByVal fZoomWidth As float	'km
								, ByVal bDontChangeZoom As Logical
								, ByVal nLevel As Integer
								)
Declare Sub GetStyleOverrideProperties(ByVal nLevel As Integer, ByVal intMapID as integer, ByVal intLayerID as integer)
Declare Sub UpdateStyleOverrideProperties(ByVal nLevel As Integer, ByVal intMapperID as integer, ByVal intLayerID as integer)
Declare Sub GetLabelProperties(ByVal nLevel As Integer, ByVal intMapID as integer, ByVal intLayerID as integer)
Declare Sub UpdateLabelProperties(ByVal nLevel As Integer, ByVal intMapperID as integer, ByVal intLayerID as integer)

Declare Function ChangeCharacters(ByVal sTheName As String) As String
Declare Sub PrintLog(ByVal strLog as string, ByVal bPrintToMessageWindow As Logical, ByVal bPrintToLogFile As Logical)

Declare Sub Sleep Lib "kernel32" Alias "Sleep" (ByVal dwMilliseconds As Integer)

Declare Sub AddIn_About
Declare Function AddIn_Name() As String
Declare Function AddIn_Description() As String
Declare Function AddIn_Version() As String
Declare Function AddIn_ImageUri() As String
Declare Sub AddIn_Help

Declare Sub EndHandler

Declare Function MSFUNCGetSiteColumnValue(  ByVal sCol As String
									) As String
Declare Function MSFUNCGetSiteColumnValueErr(ByVal sCol As String
									) As String

Declare Function MSFUNCGetColumnValue(	  ByVal sCol As String
								, ByVal nRowID As Integer
								, ByVal bReturnError As Logical
								) As String

Declare Function MSFUNCGetTableColumnValue(	  ByVal sTab As String
									, ByVal sCol As String
									, ByVal nRowID As Integer
									, ByVal bReturnError As Logical
									) As String
Declare Function MSFUNCGetTableColumnNames(	  ByVal sTab As String
									, ByVal bReturnError As Logical
									) As String
Declare Function MSFUNCGetTableColumnValues(	  ByVal sTab As String
									, ByVal nRowID As Integer
									, ByVal bReturnError As Logical
									) As String
Declare Function MSFUNCGetTableColumnNameValues(	  ByVal sTab As String
										, ByVal nRowID As Integer
										, ByVal bReturnError As Logical
										) As String

Global msLogFile as string
Dim	arrCurrentSiteTableName(2) As String

' Style Override Properties
Dim	sintLineCount(2), sintPenCount(2), sintBrushCount(2), sintFontCount(2), sintPointCount(2), sintDisplay(2), sintAlpha(2), sintBrighness(2), sintContrast(2) as smallint
Dim	strArrows(2), strNodes(2), strCentroid(2), strCurFont(2) as string
Dim	strCurLine1(), strCurSymbol1(), strCurPen1(), strCurBrush1(), strCurLine2(), strCurSymbol2(), strCurPen2(), strCurBrush2() As String

' Label Properties
Dim	sintLabelOffset(2), sintLabelOrientation(2), sintLableOrder(2), sintAutoSizeStep(2), sintLabelAlpha(2) as smallint
Dim	intLabelsMax(2) as integer
Dim	floLabelZoomMin(2), floLabelZoomMax(2) as float
Dim	strLabelExpr(2), strLabelAutoDisplay(2), strLabelVis(2), strLabelLine(2), strLabelParallel(2), strLabelPosition(2), strLabelOverlap(2), strLabelDuplicates(2),
	strLabelOrientation(2), strLabelPartial(2), strLabelRetry(2), strLabelAutoPos(2), strLabelAutoSize(2), strLabelSurpress(2), strLabelRegion(2),
	strLabelBestPosition(2), strLabelFallback(2), strLabelAbbrev(2), strLabelAbbrevExpr(2), strLabelCallout(2), strLabelCurFont(2) as string
Dim	CurLabelFont(2) as Font
Dim	strGreyscale(2) As Logical
'*******************************************************************************
'MAIN PROCEDURE
'*******************************************************************************
Sub Main

Dim	nCtrlIdx As Integer,
	sTabName, sTabCaption, sGroupName, sGroupCaption As String,
	bResult, bHasBeenAdded As Logical

OnError GoTo ErrorOccured

	Call SMPDLGLoadUserSettings(FILE_INI)	'Load Site Mapper preferences
	Call SMSDLGLoadUserSettings(FILE_INI)	'Load latest Site Mapper configuration

	Call RBNNotificationShow(xProgram,"Loading " + xProgram + " " + xVersion, Notify_Info, 2000)

	bHasBeenAdded	= FALSE
	If (CONFIGReadKey(FILE_INI_RIBBON, "RIBBON", "ADDTOHOMETAB") = "1") Then	'on the Output Group
		nCtrlIdx = RBNGroupAddControl("butSiteMapperHome", xProgram, "", ControlType_Button, TAB_HOME, TAB_GROUP_HOME_OUTPUT)
		If nCtrlIdx > 0 Then
			'Create & Set the button tooltip
			Call RBNControlSetToolTipIdx(nCtrlIdx, xProgram, "Batch create and export multiple maps based on an input table", "")
			'Set the button icon
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, "", PATH_IMAGES & "SiteMapper_32.PNG")
			'Set Custom MapBasic Handle to the button
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "OpenDialog")
		End If

		bHasBeenAdded	= TRUE
	End If

	If (CONFIGReadKey(FILE_INI_RIBBON, "RIBBON", "ADDTOLAYOUTTAB") = "1") Then	'on the Page Group
		nCtrlIdx = RBNGroupAddControl("butSiteMapperLayout", xProgram, "", ControlType_Button, TAB_LAYOUT, TAB_GROUP_LAYOUT_PAGE)
		If nCtrlIdx > 0 Then
			'Create & Set the button tooltip
			Call RBNControlSetToolTipIdx(nCtrlIdx, xProgram, "Batch create and export multiple maps based on an input table", "")
			'Set the button icon
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, "", PATH_IMAGES & "SiteMapper_32.PNG")
			'Set Custom MapBasic Handle to the button
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "OpenDialog")
		End If

		bHasBeenAdded	= TRUE
	End If

	If SMPDLGShowControlOnTab("CUSTOM") Or (not bHasBeenAdded) Then
		'**Checking for the existence of a TAB named HANDY TOOLS
		sTabName	= SMPDLGCustomTabName()
		If NOT RBNTabExists(sTabName) Then
			'**Adding the TAB named tabHandyTools with the caption of HANDY TOOLS
			'**nCtrlIdx is a reference to the element in the RibbonLib
			sTabCaption	= SMPDLGCustomTabCaption()
			nCtrlIdx	= RBNAddTab(sTabName, sTabCaption, "H")
			If NOT nCtrlIdx > 0 Then
				Exit Sub
			End If
		End If

		'**Checking for the existence of a Group named Tools
		' ##################################### Group TOOLS #####################################
		sGroupName	= SMPDLGCustomGroupName()
		If NOT RBNTabGroupExists(sTabName, sGroupName) Then
			sGroupCaption	= SMPDLGCustomGroupCaption()

			nCtrlIdx = RBNTabAddGroup(sGroupName, sGroupCaption, sTabName)
			If NOT nCtrlIdx > 0 Then
				Exit Sub
			End If
		End If

		nCtrlIdx = RBNGroupAddControl("butSiteMapperCustom", xProgram, "", ControlType_Button, sTabName, sGroupName)
		If nCtrlIdx > 0 Then
			'Create & Set the button tooltip
			Call RBNControlSetToolTipIdx(nCtrlIdx, xProgram, "Batch create and export multiple maps based on an input table", "")
			'Set the button icon
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, "", PATH_IMAGES & "SiteMapper_32.PNG")
			'Set Custom MapBasic Handle to the button
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "OpenDialog")
		End If
	End If

	nCtrlIdx	= RBNToolContextMenuAddMenuItem("rbnPrefMenuItem", "Preferences...", "")
	If nCtrlIdx > 0 Then
		'Create & Set the button tooltip
		Call RBNControlSetToolTipIdx(nCtrlIdx, "Site Mapper", "Configure Preferences for Site Mapper", "")
		'Set the button icon
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_APP_OPTSYSTEMSETTINGS_16, MI_IMG_APP_OPTSYSTEMSETTINGS_32)
		Call RBNControlSetLeftMarginIdx(nCtrlIdx, 0)
		'Set Custom MapBasic Handle to the button
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "SMShowPrefDialog")
	End If


	bResult	= RBNRegisterFunctionAsPublic("MSFUNCGetSiteColumnValue", "SMGetSiteValue", "Returns the value from a specified column of the first record in the site table")
	bResult	= RBNRegisterFunctionAsPublic("MSFUNCGetSiteColumnValueErr", "SMGetSiteValueErr", "Returns the value from a specified column of of the first record in the site table")
	bResult	= RBNRegisterFunctionAsPublic("MSFUNCGetColumnValue", "SMGetColumnValue", "Returns the value from a specified column of a single record in the site table")
	bResult	= RBNRegisterFunctionAsPublic("MSFUNCGetTableColumnValue", "SMGetTableColumnValue", "Returns the value from a specified column of a single record in a specific table")
	bResult	= RBNRegisterFunctionAsPublic("MSFUNCGetTableColumnNames", "SMGetTableColumnNames", "Returns the Column Names from a specific table")
	bResult	= RBNRegisterFunctionAsPublic("MSFUNCGetTableColumnValues", "SMGetTableValues", "Returns the values from a single record in a specific table")
	bResult	= RBNRegisterFunctionAsPublic("MSFUNCGetTableColumnNameValues", "SMGetTableNameValues", "Returns the column names and values from a single record in a specific table")

	Exit Sub
'--------------------
ErrorOccured:
	Note Err() & " " & Error$() & " Main"

End Sub

'*******************************************************************************
' OpenDialog PROCEDURE
'*******************************************************************************
Sub OpenDialog

OnError GoTo ErrorOccured

	If SMSDLG_SiteMapperSetup() Then
		Call SMSDLGSaveUserSettings(FILE_INI)
		Call SMProcessMaps
	End If

	Exit Sub
'--------------------
ErrorOccured:
	Note Err() & " " & Error$() & " OpenDialog"

End Sub

'*******************************************************************************
' Site Mapper Preferences dialog
'*******************************************************************************
Sub SMShowPrefDialog

OnError GoTo ErrorOccured

	If SMPDLGSiteMapperPreferences() Then
		Call SMPDLGSaveUserSettings(FILE_INI)
	End If

	Exit Sub
'--------------------
ErrorOccured:
	Note Err() & " " & Error$() & " SMShowPrefDialog"

End Sub

'*******************************************************************************
Sub SMProcessMaps

Dim	nMainWinID, arrLayoutMapFrameItem(2), arrMapWinID(2), nRowID, nLayer, nFrame, nNumFrames, nNumSites, arrLayerID(2), nLevel, nRowIDCharLen, nPos1, nPos2 As Integer,
	sRowID, sSiteID, sFileName, sOrigWindowTitle, sFrameName, sText, sSmartText, strOrientation, strCMD, sColValue As String,
	aSiteID, aFileName, aCol As Alias,
	oMBR, oPoint As Object,
	bSiteIDIsCharColumn As Logical,
	floPageSize As Float
Dim	arrLayoutSmartTextFrames() As LAYOUT_TEXT_FRAME
Dim	arrLayoutTextFrames() As LAYOUT_TEXT_FRAME

OnError GoTo ErrorOccured

	' >>>>>>>>>>>>>>>>>> This section creates a Map and Optional Layout for each site <<<<<<<<<<<<<<<<<<<<
	Call PrintLog("Processing Main " & SMSDLGMainWindowType$() & " Window " & WindowInfo(SMSDLGMainWID(), WIN_INFO_NAME), SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
	Call PrintLog("Processing Site Table " & SMSDLGGetSiteTab(1) & " (" & SMSDLGGetSiteColumn(1, "SITEID") & ")", SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
	sOrigWindowTitle		= WindowInfo(SMSDLGMainWID(), WIN_INFO_NAME)

	'Define coordsys to match site table
	Set Coordsys Table SMSDLGGetSiteTab(1)

	'Check if values in column selected for Window Titles and Filename are unique ...
	aSiteID	= SMSDLGGetSiteTab(1) + "." + SMSDLGGetSiteColumn(1, "SITEID")

	If SMSDLGGetFileNameType() = 1 Then 'Get FileName from a Char Column
		aFileName	= SMSDLGGetSiteTab(1) + "." + SMSDLGGetSiteColumn(1, "FILENAME")
		' Select only records with map objects
		Select aSiteID "SITEID", aFileName "FILENAME"
			From SMSDLGGetSiteTab(1)
			Where OBJ
			Order By aSiteID
			Group By aSiteID
			Into _SEL_SITE_IDS NoSelect
	Else
		' Select only records with map objects
		Select aSiteID "SITEID"
			From SMSDLGGetSiteTab(1)
			Where OBJ
			Order By aSiteID
			Group By aSiteID
			Into _SEL_SITE_IDS NoSelect
	End If

	nNumSites = TableInfo(_SEL_SITE_IDS, TAB_INFO_NROWS)
	If nNumSites = 0 Then
		Note "No mappable objects in table. Quitting"
		exit sub
	End If

	' Check if user wants to proceed ...
	If not Ask("This process will create " + nNumSites + " maps."
				+ chr$(10) + "Make sure you have closed any image and PDF files this process will recreated."
				+ chr$(10)
				+ chr$(10) + "Are you sure you want to proceed?", "Yes", "No") Then
		Exit Sub
	End If

	Call PrintLog("Creating (" + SMSDLGNumberOfMaps() + ") maps for " + nNumSites + " sites.", SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())

	' Get layer style override settings and label settings of site layer
	For nLevel = 1 To SMSDLGNumberOfMaps()
		If SMSDLGQuerySiteTab(nLevel) Then
			If SMSDLGAddSiteAsLayer(nLevel) Then
				' Check if SMSDLGGetSiteTab(nLevel) is in SMSDLGSelectedMapperWID(nLevel)
				For nLayer = 1 to MapperInfo(SMSDLGSelectedMapperWID(nLevel), MAPPER_INFO_LAYERS)
					If LayerInfo(SMSDLGSelectedMapperWID(nLevel), nLayer, LAYER_INFO_NAME) = SMSDLGGetSiteTab(nLevel) Then
						arrLayerID(nLevel) = nLayer
						Exit for
					End If
				Next
				If arrLayerID(nLevel) > 0 Then
					If SMSDLGStyleOverideSiteLayer(nLevel) Then
						Call GetStyleOverrideProperties(nLevel, SMSDLGSelectedMapperWID(nLevel), arrLayerID(nLevel))
						Call GetLabelProperties(nLevel, SMSDLGSelectedMapperWID(nLevel), arrLayerID(nLevel))
					End If
					Call PrintLog(nLevel & ". Site Layer " + SMSDLGGetSiteTab(nLevel) + " is in selected Mapper " + SMSDLGSelectedMapperWID(nLevel) + ", position " + arrLayerID(nLevel), SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
				Else ' Should not happen, as site layer is selected from list of layers in the mappers/layouts
					Note nLevel & ". Site Layer " + SMSDLGGetSiteTab(nLevel) + " not found in Mapper Window " + SMSDLGSelectedMapperWID(nLevel)
					Exit Sub
				End If
				' If option set to turn off site layer, toggle off
				If SMSDLGTurnOffSiteLayer(nLevel) Then
					Call PrintLog("Turning Of Display of Layer " & LayerInfo(SMSDLGSelectedMapperWID(nLevel), arrLayerID(nLevel), LAYER_INFO_NAME), SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
					Set Map Window SMSDLGSelectedMapperWID(nLevel) Layer arrLayerID(nLevel) Display Off
				End If
			End If
		End If
	Next

	If SMSDLGCreateCopiesOfMainWindow() Then
		If SMSDLGExportLayoutWindow() Then
			'**Get LayoutItems for windows
			Call PrintLog("Finding Frame with Maps in Main Window...", SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
			For nLevel = 1 To SMSDLGNumberOfMaps()
				For nFrame = 1 to LayoutInfo(SMSDLGMainWID(),LAYOUT_INFO_NUM_ITEMS)
					If LayoutItemInfo(SMSDLGMainWID(), nFrame, LAYOUT_ITEM_INFO_TYPE) = LAYOUT_ITEM_TYPE_MAPPER Then
						If LayoutItemInfo(SMSDLGMainWID(), nFrame, LAYOUT_ITEM_INFO_WIN) = SMSDLGSelectedMapperWID(nLevel) Then
							arrLayoutMapFrameItem(nLevel)	= nFrame
							Exit For
						End If
					End If
				Next
			Next

			'**Load LayoutItems for dynamic strings/smart texts
			Call PrintLog("Finding Text Frame with Smart Texts in Main Window...", SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
			nNumFrames	= 0
			For nFrame = 1 to LayoutInfo(SMSDLGMainWID(),LAYOUT_INFO_NUM_ITEMS)
				If LayoutItemInfo(SMSDLGMainWID(), nFrame, LAYOUT_ITEM_INFO_TYPE) = LAYOUT_ITEM_TYPE_TEXT Then
					sText		= LayoutItemInfo(SMSDLGMainWID(), nFrame, LAYOUT_ITEM_INFO_TEXTSTRING)
					sSmartText	= LayoutItemInfo(SMSDLGMainWID(), nFrame, LAYOUT_ITEM_INFO_SMART_TEXTSTRING)
					sFrameName	= LayoutItemInfo(SMSDLGMainWID(), nFrame, LAYOUT_ITEM_INFO_NAME)

					If sText <> sSmartText Then
						If sText Like "%SMGet%" Then
							nNumFrames	= nNumFrames + 1
							Redim arrLayoutSmartTextFrames(nNumFrames)
							Call PrintLog(nNumFrames & " Frame " & nFrame & " " & sFrameName & ": " & sText & " = " & sSmartText, SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
							arrLayoutSmartTextFrames(nNumFrames).nFrameID	= nFrame
							arrLayoutSmartTextFrames(nNumFrames).sFrameName	= sFrameName
							arrLayoutSmartTextFrames(nNumFrames).sText		= sText
							arrLayoutSmartTextFrames(nNumFrames).sSmartText	= sSmartText
						Else
							Call PrintLog("Not SiteMapper SmartText: Frame " & nFrame & " " & sFrameName & ": " & sText & " = " & sSmartText, SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
						End If
					End If
				End If
			Next
		End If
	End If

	'**Load LayoutItems for dynamic strings/smart texts
	If SMSDLGExportLayoutWindow() Then
		Call PrintLog("Finding Text Frame with <COL...> Texts in Main Window...", SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
		'**Load LayoutItems for dynamic strings/smart texts
		nNumFrames	= 0
		For nFrame = 1 to LayoutInfo(SMSDLGMainWID(),LAYOUT_INFO_NUM_ITEMS)
			If LayoutItemInfo(SMSDLGMainWID(), nFrame, LAYOUT_ITEM_INFO_TYPE) = LAYOUT_ITEM_TYPE_TEXT Then
				sText		= LayoutItemInfo(SMSDLGMainWID(), nFrame, LAYOUT_ITEM_INFO_TEXTSTRING)
				sSmartText	= LayoutItemInfo(SMSDLGMainWID(), nFrame, LAYOUT_ITEM_INFO_SMART_TEXTSTRING)
				sFrameName	= LayoutItemInfo(SMSDLGMainWID(), nFrame, LAYOUT_ITEM_INFO_NAME)

				nPos1 = InStr(1, sFrameName, "<COL")
				If nPos1 > 0 Then
					nPos2 = InStr(nPos1, sFrameName, ">")
					If nPos2 > 0 Then
						nNumFrames	= nNumFrames + 1
						Redim arrLayoutTextFrames(nNumFrames)
						Call PrintLog(nNumFrames & " Frame " & nFrame & " " & sFrameName & ": " & sText, SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
						arrLayoutTextFrames(nNumFrames).nFrameID	= nFrame
						arrLayoutTextFrames(nNumFrames).sFrameName	= sFrameName
						arrLayoutTextFrames(nNumFrames).sText		= sText

						sFrameName	= Right$(sFrameName,len(sFrameName) - nPos1 - 3)  ' Trim off right of string up to number
						nPos2		= instr(1, sFrameName, ">")
						arrLayoutTextFrames(nNumFrames).nColNumber	= Val(Left$(sFrameName, nPos2 - 1))  ' trim left, before the ">"
						Call PrintLog("      Column: COL" & arrLayoutTextFrames(nNumFrames).nColNumber, SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
					End If
				End If
			End If
		Next
	End If

	'**Get length of potential RowID with prefixed 0's
	nRowIDCharLen		= Minimum(3, Len(Str$(nNumSites)))		'Minimum 000 -> 001.pdf
	'**Check is SiteID columns is a character column type
	bSiteIDIsCharColumn	= (ColumnInfo("_SEL_SITE_IDS", "SITEID", COL_INFO_TYPE) = COL_TYPE_CHAR)

	' Create map for each row in grouped table ...
	Fetch First from _SEL_SITE_IDS
	Do Until EOT(_SEL_SITE_IDS)

		OnError goto BadRecord

		nRowID			= _SEL_SITE_IDS.ROWID
		If bSiteIDIsCharColumn Then
			sSiteID		= _SEL_SITE_IDS.SITEID
		Else
			sSiteID		= Str$(_SEL_SITE_IDS.SITEID)
		End If

		sRowID			= Right$(String$(nRowIDCharLen, "0") & nRowID, nRowIDCharLen) '-> 001, 002, 003 etc
		arrCurrentSiteTableName(1) = "q1_" + sRowID
		arrCurrentSiteTableName(2) = "q2_" + sRowID

		Call PrintLog("@-@-@-@-@-@-@-@-@", SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
		Call PrintLog("Processing map for Site " & FormatNumber$(nRowID) & " of " & FormatNumber$(nNumSites) & ": " & sRowID  & ": Site ID: " & sSiteID, SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())

	   	' >>>> GET VALUE FROM COLUMN FOR WINDOW TITLE AND FILENAME
	   	Do Case SMSDLGGetFileNameType()	'1: Char Column; 2: Site ID; 3: Counter"
	   		Case 1	'1: Use Char Column
				If ColumnInfo(_SEL_SITE_IDS, "FILENAME", COL_INFO_TYPE) = COL_TYPE_CHAR Then 'if column is a character column ...
					sFileName = _SEL_SITE_IDS.FILENAME
				Else 'if column is not a character
					sFileName = str$(_SEL_SITE_IDS.FILENAME)
				End If
			Case 2	'2: Site ID
				sFileName 	= sSiteID
			Case 3	'3: Counter"
				sFileName		= sRowID
		End Case

		' replace/remove spaces, brackets, etc
		sFileName = IIf(SMSDLGUseProperCase("MapTitle"), Proper$(sFileName), sFileName)

		Call PrintLog("     " & nRowID & ": Filename: " & sFileName, SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())

		'**Cloning the Main Window
		If SMSDLGCreateCopiesOfMainWindow() Then
			Call PrintLog("     Cloning the Main Window", SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
			'Clone Main Window
			Run Command WindowInfo(SMSDLGMainWID(), WIN_INFO_CLONEWINDOW)

			nMainWinID	= FrontWindow() ' new cloned window
			Set Window nMainWinID Show ' show the new layout window

			If SMSDLGExportLayoutWindow() Then
				For nLevel = 1 To SMSDLGNumberOfMaps()
					If arrLayoutMapFrameItem(nLevel) > 0 Then
						arrMapWinID(nLevel)	= LayoutItemInfo(nMainWinID, arrLayoutMapFrameItem(nLevel), LAYOUT_ITEM_INFO_WIN)
					End If
				Next
			Else
				arrMapWinID(1)	= nMainWinID
			End If
		Else
			Call PrintLog("     NOT Cloning the Main Window", SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
			nMainWinID	= SMSDLGMainWID()

			For nLevel = 1 To SMSDLGNumberOfMaps()
				arrMapWinID(nLevel)	= SMSDLGSelectedMapperWID(nLevel)
			Next
		End If

		' Set Window Title
		Call PrintLog("Set Window Title to " + sFileName + ".", SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
		Set Window nMainWinID Title sFileName
		Set Window nMainWinID show

		For nLevel = 1 To SMSDLGNumberOfMaps()
			If SMSDLGQuerySiteTab(nLevel) Then
				aSiteID	= SMSDLGGetSiteTab(nLevel) & "." & SMSDLGGetSiteColumn(nLevel, "SITEID")
				If bSiteIDIsCharColumn Then
'					Select *
'						From SMSDLGGetSiteTab(nLevel)
'						Where aSiteID = Val(sSiteID)
'						Into arrCurrentSiteTableName(nLevel) NoSelect

					strCmd = "Select * From " & SMSDLGGetSiteTab(nLevel)
							& " Where " & SMSDLGGetSiteColumn(nLevel, "SITEID") & " = " & Chr$(34) & sSiteID & Chr$(34)
							& " Into " & arrCurrentSiteTableName(nLevel) & " NoSelect"
				Else
'					Select *
'						From SMSDLGGetSiteTab(nLevel)
'						Where aSiteID = Val(sSiteID)
'						Into arrCurrentSiteTableName(nLevel) NoSelect

					strCmd = "Select * From " & SMSDLGGetSiteTab(nLevel)
							& " Where " & SMSDLGGetSiteColumn(nLevel, "SITEID") & " = " & sSiteID
							& " Into " & arrCurrentSiteTableName(nLevel) & " NoSelect"
				End If
				Call PrintLog("     " & nRowID & ": SQL Query: " & strCmd, SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
				Run Command strCmd
				Call PrintLog("     " & nRowID & ": Query: " & arrCurrentSiteTableName(nLevel) & " Records: " & TableInfo(arrCurrentSiteTableName(nLevel), TAB_INFO_NROWS), SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())

				If arrMapWinID(nLevel) <> 0 Then
					Call PrepareMapForCurrentSite(arrMapWinID(nLevel), arrLayerID(nLevel), arrCurrentSiteTableName(nLevel)
										, SMSDLGAddSiteAsLayer(nLevel)
										, SMSDLGGetZoomType(nLevel), SMSDLGGetZoomWidth(nLevel), SMSDLGKeepCurrentZoom(nLevel), nLevel)
					Set Window arrMapWinID(nLevel) Front
					Update Window arrMapWinID(nLevel)
				Else
					Call PrintLog("     " & nRowID & ": Not preparing any map for level: " & nLevel, SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
				End If
			Else
				Call PrintLog("     " & nRowID & ": Not Querying any table for level: " & nLevel, SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
			End If
		Next

		Set Window nMainWinID Front

		If SMSDLGExportLayoutWindow() Then
			Set Layout Window nMainWinID Extents To Fit
			Set Layout Window nMainWinID Frame Contents On
			Set Layout Window nMainWinID Selection Clear
		End If

		'**Crystalyzing SmartText for cloned layout windows, if required
		For nFrame = 1 To Ubound(arrLayoutSmartTextFrames)
			sSmartText	= LayoutItemInfo(nMainWinID, arrLayoutSmartTextFrames(nFrame).nFrameID, LAYOUT_ITEM_INFO_SMART_TEXTSTRING)
			Call PrintLog(" Crystalyze: Frame " & nFrame & " FrameID: " & arrLayoutSmartTextFrames(nFrame).nFrameID & ": Text => " & sSmartText, SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
			Alter Designer Text Window nMainWinID ID arrLayoutSmartTextFrames(nFrame).nFrameID Text sSmartText
		Next

		'**Crystalyzing <COL...> for layout windows, if required
		For nFrame = 1 To Ubound(arrLayoutTextFrames)
			If arrLayoutTextFrames(nFrame).nColNumber Between 1 And TableInfo(arrCurrentSiteTableName(1), TAB_INFO_NCOLS) Then
				' Get relevant column value from query
				Fetch First From arrCurrentSiteTableName(1)
				aCol			= arrCurrentSiteTableName(1) + ".COL" + Str$(arrLayoutTextFrames(nFrame).nColNumber)
				sColValue		= str$(aCol)
				sFrameName	= arrLayoutTextFrames(nFrame).sFrameName
				nPos1 		= InStr(1, sFrameName, "<COL")
				nPos2 		= InStr(nPos1, sFrameName, ">")

				sText		= Left$(sFrameName, nPos1 - 1) + sColValue + Right$(sFrameName, Len(sFrameName) - nPos2)
				Call PrintLog(" Change <COL..>: Frame " & arrLayoutTextFrames(nFrame).nFrameID & " FrameName: " & sFrameName & ": Text => " & sText, SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
				Alter Designer Text Window nMainWinID ID arrLayoutTextFrames(nFrame).nFrameID Text sText
			End If
		Next

		Update Window nMainWinID

		'**Delaying Print/Output if required by user
		If SMSDLGDelayOnPrintWindow() Then
			Call PrintLog("Creating output after a delay of " + FormatNumber$(SMSDLGGetDelayPrintMiliSecs()) + " msecs.", SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
			Call Sleep(SMSDLGGetDelayPrintMiliSecs())
		End If

		' >>>>>>>  Print JPG if checkbox is ticked ..
		If SMSDLGExportToFormat("JPG") Then
			Call PrintLog("Exporting Window as JPG at "+ SMSDLGGetImageResolution() +"dpi to "+SMSDLGGetOutputFolder() + sFileName + ".jpg", SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
			Save Window nMainWinID As SMSDLGGetOutputFolder() + sFileName + ".jpg"
				Type "JPEG" Resolution + SMSDLGGetImageResolution()
		End If

		' >>>>>>>  Print PNG if checkbox is ticked ..
		If SMSDLGExportToFormat("PNG") Then
			Call PrintLog("Exporting Window as PNG at "+ SMSDLGGetImageResolution() +"dpi to "+SMSDLGGetOutputFolder() + sFileName + ".PNG", SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
			Save Window nMainWinID As SMSDLGGetOutputFolder() + sFileName +".PNG"
				Type "PNG" Resolution + SMSDLGGetImageResolution()
		End If

		' >>>>>>> print PDF if checkbox is ticked ..
		If SMSDLGExportToFormat("PDF") Then ' print MAP to PDF and JPG
			If SMSDLGExportMapWindow() Then ' Export MAPPER instead of LAYOUT ...
				Call PrintLog("Exporting Map Window with PDF driver " + SMSDLGGetPDFPrinterDriver$() + ".", SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())

				' get map page orientation
				If WindowInfo(nMainWinID, WIN_INFO_PRINTER_ORIENT) = WIN_PRINTER_PORTRAIT Then
					strOrientation = "Portrait"
				ElseIf WindowInfo(nMainWinID, WIN_INFO_PRINTER_ORIENT) = WIN_PRINTER_LANDSCAPE Then
					strOrientation = "Landscape"
				End If

				' Set which PDF driver to use and page orientation
				strCmd = "Set Window " + nMainWinID
						+ " Printer Name " + chr$(34) + SMSDLGGetPDFPrinterDriver$() + chr$(34)
						+ " Orientation " + strOrientation + " Copies 1 Papersize 9"
				Run Command strCmd

				' create strCmd to print map
				strCmd = "PrintWin Window " + nMainWinID
						+ " File " + chr$(34)+ SMSDLGGetOutputFolder() + sFileName + ".pdf" + chr$(34)
						+ " overwrite" ' prints directly to output folder and overwrites file
				Call PrintLog(strCMD, SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
				Run Command strCmd

			Else  ' Export LAYOUT instead of MAPPER

				Call PrintLog("Exporting Layout Window with PDF driver " + SMSDLGGetPDFPrinterDriver$() + ".", SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
				' get layout page orientation
				If WindowInfo(nMainWinID, WIN_INFO_PRINTER_ORIENT) = 1 Then ' portrait
					strOrientation = "Portrait"
				ElseIf WindowInfo(nMainWinID, WIN_INFO_PRINTER_ORIENT) = 2 Then 'landscape
					strOrientation = "Landscape"
				End If

				' Get Layout page size
				floPageSize =  WindowInfo(nMainWinID, WIN_INFO_PRINTER_PAPERSIZE)

				' Set which PDF driver to use and page orientation
				strCmd = "Set Window " + nMainWinID
						+ " Printer Name " + chr$(34) + SMSDLGGetPDFPrinterDriver$() + chr$(34)
						+ " Orientation " + strOrientation + " Copies 1 Papersize " + floPageSize
				Run Command strCmd

				strCmd = "PrintWin Window " + nMainWinID
						+ " File " +chr$(34)+ SMSDLGGetOutputFolder() + sFileName + ".pdf" + chr$(34)
						+ " overwrite" ' prints directly to output folder and overwrites file
				Call PrintLog(strCMD, SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
				Run Command strCmd
			End If
		Else
			'print "Not printing PDF."
		End If

		If SMSDLGDelayOnNextSite() Then
			Call PrintLog("Moving onto next Site after a delay of " + FormatNumber$(SMSDLGGetDelayNextSiteMiliSecs()) + " msecs.", SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
			Call Sleep(SMSDLGGetDelayNextSiteMiliSecs())
		End If

		Call PrintLog("Completed printing maps for site " + sFileName, SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())

'		---------------
		SkipToHere:
		If Not SMSDLGCreateCopiesOfMainWindow() Then
			For nLevel = 1 To SMSDLGNumberOfMaps()
				If SMSDLGQuerySiteTab(nLevel) And SMSDLGGetSiteTab(nLevel) <> "" Then
					Close Table arrCurrentSiteTableName(nLevel)
				End If
			Next
		End If

		Fetch Next From _SEL_SITE_IDS
	Loop

	For nLevel = 1 To SMSDLGNumberOfMaps()
		If SMSDLGAddSiteAsLayer(nLevel) Then
			If SMSDLGTurnOffSiteLayer(nLevel) Then
				Call PrintLog("Set Map Window " & SMSDLGSelectedMapperWID(nLevel) & " Layer " & arrLayerID(nLevel) & " Display Global", SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
				Set Map Window SMSDLGSelectedMapperWID(nLevel) Layer arrLayerID(nLevel) Display Global
			End If
		End If
	Next

	If Not SMSDLGCreateCopiesOfMainWindow() Then
		Call PrintLog("Set Window " & nMainWinID & " Title " & sOrigWindowTitle, SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
		Set Window SMSDLGMainWID() Title sOrigWindowTitle

		If SMSDLGExportLayoutWindow() Then
			'**Resetting <COL...> text frames to original text for layout windows
			For nFrame = 1 To Ubound(arrLayoutTextFrames)
				sText		= arrLayoutTextFrames(nFrame).sText
				Call PrintLog(" Resetting <COL..>: Frame " & arrLayoutTextFrames(nFrame).nFrameID & " FrameName: " & sFrameName & ": Text => " & sText, SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
				Alter Designer Text Window nMainWinID ID arrLayoutTextFrames(nFrame).nFrameID Text sText
			Next
		End If
	End If

	' close temp query
	Close Table _SEL_SITE_IDS

	beep
	Call PrintLog("Finished Exporting all maps", SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
	'note "The program is finished"
	If Ask("Finished!"+chr$(13)+chr$(13)+"Open Log File?","Yes","No") Then
		run program "notepad.exe " + msLogFile
	End If

	Exit Sub
'--------------------
ErrorOccured:
	Note Err() & " " & Error$() & " SMProcessMaps"

Exit Sub
' ---------------------------
BadRecord:
	Call PrintLog("Error with site " + nRowID + ": " + sSiteID + ". Skipping to next site: " & Err() & " " & Error$(), SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
	goto SkipToHere

end sub

'*******************************************************************************
Sub PrepareMapForCurrentSite(	  ByVal nMID As integer
						, ByVal nSiteLayerID As Integer
						, ByVal sCurrentSiteTab As String
						, ByVal bAddCurrentSiteAsLayer As Logical
						, ByVal nZoomType As Integer
						, ByVal fZoomWidth As float	'km
						, ByVal bDontChangeZoom As Logical
						, ByVal nLevel As Integer
						)

Dim	oMBR, oPoint As Object

OnError GoTo ErrorOccured

	If nMID <> 0 Then
		If TABIsOpen(sCurrentSiteTab) Then
			If TableInfo(sCurrentSiteTab, TAB_INFO_MAPPABLE) Then
				If TableInfo(sCurrentSiteTab, TAB_INFO_NROWS) > 0 Then
					If nZoomType = 1 Then
						oMBR		= MBR(CreateLine(TableInfo(sCurrentSiteTab, TAB_INFO_MINX)
										, TableInfo(sCurrentSiteTab, TAB_INFO_MINY)
										, TableInfo(sCurrentSiteTab, TAB_INFO_MAXX)
										, TableInfo(sCurrentSiteTab, TAB_INFO_MAXY)))
						oPoint	= Centroid(oMBR)
					End If

					' Pan and Zoom Mapper on Layout ...
					Set Map Window nMID Redraw off

					If bAddCurrentSiteAsLayer Then ' if option to add selection to mapper is checked Then ...
						Add map window nMID
							layer sCurrentSiteTab
							Position nSiteLayerID
						If SMSDLGStyleOverideSiteLayer(nLevel) Then
							Call UpdateLabelProperties(nLevel, nMID, nSiteLayerID)
							Call UpdateStyleOverrideProperties(nLevel, nMID, nSiteLayerID)
						End If
					End If

					Do Case nZoomType
						Case 1 	'Set map centre to object centroid and zoom as specified by control
							Call PrintLog("  Panning map window " + nMID + " to center of site.", SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
							If bDontChangeZoom Then
								Set Map Window nMID
									Center (CentroidX(oPoint), CentroidY(oPoint))
							Else
								Set Map Window nMID
									Center (CentroidX(oPoint), CentroidY(oPoint))
									Zoom fZoomWidth Units "km"
							End If

						Case 2  	' zoom map to extent of object
							Call PrintLog("  Zooming map window " + nMID + " to Full Extent of site.", SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
							If not bAddCurrentSiteAsLayer Then ' if option to add selection to mapper is checked Then ...
								' Add to map at position 1, to zoom to, Then remove
								Add map window nMID layer sCurrentSiteTab Position 1 ' add layer at set position, so it can be removed
								Set Map Window nMID
									Zoom Entire Layer sCurrentSiteTab
								Remove Map Window nMID Layer 1 ' remove site layer added
							Else
								Set Map Window nMID
									Zoom Entire Layer sCurrentSiteTab
							End If

						Case 3 		' do not change map extent
							Call PrintLog("  Not changing mapper extent.", SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
					End Case
					Set Map Window nMID Redraw On
				Else
					Call PrintLog("  Child Site table '" & sCurrentSiteTab & "' holds no records.", TRUE, TRUE)
				End If
			Else
				Call PrintLog("  Child Site table '" & sCurrentSiteTab & "' is not mappable.", TRUE, TRUE)
			End If
		Else
			Call PrintLog("  Child Site table '" & sCurrentSiteTab & "' is not open.", TRUE, TRUE)
		End If
	End If

	Exit Sub
'--------------------
ErrorOccured:
	Note Err() & " " & Error$() & " PrepareMapForCurrentSite"

End Sub

'*******************************************************************************
Sub GetStyleOverrideProperties(ByVal nLevel As Integer, ByVal intMapID as integer, ByVal intLayerID as integer)

Dim	i as integer,
	curLine() as Pen,
	curBrush() as Brush,
	curSymbol() as Symbol,
	CurFont as Font,
	curPen() as Pen

OnError goto ErrorHandler

	' Get style override and display status: 0 = layer display off, 1 = layer on with default style, 2 = layer on with display override, 3 = layer appears as thematic
	sintDisplay(nLevel)	= LayerInfo(intMapID,intLayerID,LAYER_INFO_DISPLAY)

	' get translucency settings for vector and image layers
	sintAlpha(nLevel)	= LayerInfo(intMapID,intLayerID,LAYER_INFO_LAYER_ALPHA)
	'print "sintAlpha="+sintAlpha(nLevel)

	' Get brightness and contrast for image layers only
	'print "layer type "+ LayerInfo(intMapID,intLayerID,LAYER_INFO_TYPE)
	If LayerInfo(intMapID,intLayerID,LAYER_INFO_TYPE) = Any(2,5,6) Then ' LAYER_INFO_TYPE_IMAGE,  LAYER_INFO_TYPE_WMS, LAYER_INFO_TYPE_TILESERVER
		sintBrighness(nLevel)	= LayerInfo(intMapID,intLayerID,LAYER_INFO_RASTER_BRIGHTNESS)
		'print "sintBrighness="+sintBrighness(nLevel)
		sintContrast(nLevel)	= LayerInfo(intMapID,intLayerID,LAYER_INFO_RASTER_CONTRAST)
		'print "sintContrast="+sintContrast(nLevel)
		strGreyscale(nLevel)	= IIf(LayerInfo(intMapID,intLayerID,LAYER_INFO_RASTER_GREYSCALE), "On", "Off")
		'print "strGreyscale="+strGreyscale(nLevel)
	End If

	If LayerInfo(intMapID,intLayerID,LAYER_INFO_TYPE) = LAYER_INFO_TYPE_NORMAL Then	' Only for vector layers. Will return error if WMS/WMTS/etc
		' count stacked style
		sintPointCount(nLevel) = LayerInfo(intMapID,intLayerID, LAYER_INFO_OVR_SYMBOL_COUNT)
		'print "sintPointCount="+sintPointCount(nLevel)
		sintLineCount(nLevel) = LayerInfo(intMapID,intLayerID, LAYER_INFO_OVR_LINE_COUNT)
		'print "sintLineCount="+sintLineCount(nLevel)
		sintPenCount(nLevel) = LayerInfo(intMapID,intLayerID, LAYER_INFO_OVR_PEN_COUNT)
		'print "sintPenCount="+sintPenCount(nLevel)
		sintBrushCount(nLevel) = LayerInfo(intMapID,intLayerID, LAYER_INFO_OVR_BRUSH_COUNT)
		'print "sintBrushCount="+sintBrushCount(nLevel)
		sintFontCount(nLevel) = LayerInfo(intMapID,intLayerID, LAYER_INFO_OVR_FONT_COUNT)  ' Will only be 1 stacked style for fonts in MapInfo 16.0
		'print "sintFontCount="+sintFontCount(nLevel)

		' Get Line Properties for style override
		If sintLineCount(nLevel) = 1 Then
			redim curLine(1)
			curLine(1) = StyleOverrideInfo(intMapID,intLayerID,0,STYLE_OVR_INFO_LINE)
			If nLevel = 1 Then
				redim strCurLine1(1)
				strCurLine1(1) = curLine(1)
				'print "strCurLine1(1) = "+strCurLine1(1)
				strCurLine1(1) = "Line"+Right$(strCurLine1(1),len(strCurLine1(1))-3) ' change prefix "Pen" to "Line"
				'print "strCurLine1 = "+strCurLine1(1)
			Else
				redim strCurLine2(1)
				strCurLine2(1) = curLine(1)
				'print "strCurLine2(1) = "+strCurLine2(1)
				strCurLine2(1) = "Line"+Right$(strCurLine2(1),len(strCurLine2(1))-3) ' change prefix "Pen" to "Line"
				'print "strCurLine2 = "+strCurLine2(1)
			End If
		ElseIf sintLineCount(nLevel) > 1 Then
			redim curLine(sintLineCount(nLevel))

			If nLevel = 1 Then
				redim strCurLine1(sintLineCount(nLevel))
				For i = 1 to sintLineCount(nLevel)
					curLine(i)	= LayerStyleInfo(intMapID, intLayerID, 0, i, STYLE_OVR_INFO_LINE)
					strCurLine1(i)	= curLine(i)
					strCurLine1(i)	= "Line" + Right$(strCurLine1(i), len(strCurLine1(i))-3) ' change prefix "Pen" to "Line"
					'print "strCurLine1("+i+") = "+strCurLine1(i)
				Next
			Else
				redim strCurLine2(sintLineCount(nLevel))
				For i = 1 to sintLineCount(nLevel)
					curLine(i)	= LayerStyleInfo(intMapID, intLayerID, 0, i, STYLE_OVR_INFO_LINE)
					strCurLine2(i)	= curLine(i)
					strCurLine2(i)	= "Line" + Right$(strCurLine2(i), len(strCurLine2(i))-3) ' change prefix "Pen" to "Line"
					'print "strCurLine1("+i+") = "+strCurLine1(i)
				Next
			End If
		End If

		' Get Symbol Properties for style override
		If sintPointCount(nLevel) = 1 Then
			redim curSymbol(1)
			curSymbol(1) = StyleOverrideInfo(intMapID,intLayerID,0,STYLE_OVR_INFO_SYMBOL)
			If nLevel = 1 Then
				redim strCurSymbol1(1)
				strCurSymbol1(1) = curSymbol(1)
				'print "strCurSymbol1(1) = "+strCurSymbol1(1)
			Else
				redim strCurSymbol2(1)
				strCurSymbol2(1) = curSymbol(1)
				'print "strCurSymbol2(1) = "+strCurSymbol2(1)
			End If
		ElseIf sintPointCount(nLevel) > 1 Then
			redim curSymbol(sintPointCount(nLevel))
			If nLevel = 1 Then
				redim strCurSymbol1(sintPointCount)
				For i = 1 to sintPointCount(nLevel)
					curSymbol(i) = LayerStyleInfo(intMapID,intLayerID,0,i,STYLE_OVR_INFO_SYMBOL)
					strCurSymbol1(i) = curSymbol(i)
					'print "strCurSymbol1("+i+") = "+strCurSymbol1(i)
				Next
			Else
				redim strCurSymbol2(sintPointCount)
				For i = 1 to sintPointCount(nLevel)
					curSymbol(i) = LayerStyleInfo(intMapID,intLayerID,0,i,STYLE_OVR_INFO_SYMBOL)
					strCurSymbol2(i) = curSymbol(i)
					'print "strCurSymbol2("+i+") = "+strCurSymbol2(i)
				Next
			End If
		End If

		' Get Pen Properties for style override
		If sintPenCount(nLevel) = 1 Then
			redim curPen(1)
			curPen(1) = StyleOverrideInfo(intMapID, intLayerID, 0, STYLE_OVR_INFO_PEN)
			If nLevel = 1 Then
				redim strCurPen1(1)
				strCurPen1(1) = curPen(1)
				'print "strCurPen1(1) = "+strCurPen1(1)
			Else
				redim strCurPen2(1)
				strCurPen2(1) = curPen(1)
				'print "strCurPen2(1) = "+strCurPen2(1)
			End If
		ElseIf sintPenCount(nLevel) > 1 Then
			redim curPen(sintPenCount(nLevel))
			If nLevel = 1 Then
				redim strCurPen1(sintPenCount(nLevel))
				For i = 1 to sintPenCount(nLevel)
					curPen(i)		= LayerStyleInfo(intMapID,intLayerID,0,i,STYLE_OVR_INFO_PEN)
					strCurPen1(i)	= curPen(i)
					'print "strCurPen1("+i+") = "+strCurPen1(i)
				Next
			Else
				redim strCurPen2(sintPenCount(nLevel))
				For i = 1 to sintPenCount(nLevel)
					curPen(i)		= LayerStyleInfo(intMapID,intLayerID,0,i,STYLE_OVR_INFO_PEN)
					strCurPen2(i)	= curPen(i)
					'print "strCurPen2("+i+") = "+strCurPen2(i)
				Next
			End If
		End If

		' Get BRUSH Properties for style override
		If sintBrushCount(nLevel) = 1 Then
			redim curBrush(1)
			curBrush(1) = StyleOverrideInfo(intMapID, intLayerID, 0, STYLE_OVR_INFO_BRUSH)
			If nLevel = 1 Then
				redim strCurBrush1(1)
				strCurBrush1(1) = curBrush(1)
				'print "curBrush1(1) = " + curBrush1(1)
			Else
				redim strCurBrush2(1)
				strCurBrush2(1) = curBrush(1)
				'print "curBrush2(1) = " + curBrush2(1)
			End If
		ElseIf sintBrushCount(nLevel) > 1 Then
			redim curBrush(sintBrushCount(nLevel))
			If nLevel = 1 Then
				redim strCurBrush1(sintBrushCount(nLevel))
				For i = 1 to sintBrushCount(nLevel)
					curBrush(i) = LayerStyleInfo(intMapID,intLayerID,0,i,STYLE_OVR_INFO_BRUSH)
					strCurBrush1(i) = curBrush(i)
					'print "strCurBrush1("+i+") = "+strCurBrush1(i)
				Next
			Else
				redim strCurBrush2(sintBrushCount(nLevel))
				For i = 1 to sintBrushCount(nLevel)
					curBrush(i) = LayerStyleInfo(intMapID,intLayerID,0,i,STYLE_OVR_INFO_BRUSH)
					strCurBrush2(i) = curBrush(i)
					'print "strCurBrush2("+i+") = "+strCurBrush2(i)
				Next
			End If
		End If

		' Get Font Properties for style override
		' Note in MapInfo 16.0 only one stack for FONTS. So not an array
		curFont			= StyleOverrideInfo(intMapID, intLayerID, 0, STYLE_OVR_INFO_FONT)
		strCurFont(nLevel)	= curFont

		strArrows(nLevel)	= IIf(StyleOverrideInfo(intMapID, intLayerID, 0, STYLE_OVR_INFO_ARROWS), "On", "Off")
		strNodes(nLevel)	= IIf(StyleOverrideInfo(intMapID, intLayerID, 0, STYLE_OVR_INFO_NODES), "On", "Off")
		strCentroid(nLevel)	= IIf(StyleOverrideInfo(intMapID, intLayerID, 0, STYLE_OVR_INFO_CENTROIDS), "On", "Off")

	End If

Exit Sub
'---------------------------
ErrorHandler:
	Note Error$()

End Sub

'########################################################################################
Sub GetLabelProperties(ByVal nLevel As Integer, ByVal intMapID as integer, ByVal intLayerID as integer)

Dim	bLabelUseAbbrev, bLabelAutoDisplay, bLabelOverlap, bLabelRetry, bLabelParallel, bLabelDuplicates, bLabelPartial, bLabelCurvedFallback As Logical,
	bLabelAutoPos, bLabelCallout, bLabelCurved, bLabelBestPosition, bLabelSupress As Logical,
	strCurLabelPen As String

OnError goto ErrorHandler

	floLabelZoomMin(nLevel)		= LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_ZOOM_MIN)
	floLabelZoomMax(nLevel)		= LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_ZOOM_MAX)
	strLabelExpr(nLevel)		= LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_EXPR)
	bLabelUseAbbrev			= LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_USE_ABBREVIATION)
	strLabelAbbrevExpr(nLevel)	= LayerInfo(intMapID,intLayerID,LAYER_INFO_ABBREVIATION_EXPR)
	CurLabelFont(nLevel)		= LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_FONT)
	bLabelParallel				= LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_PARALLEL)
	bLabelDuplicates			= LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_DUPLICATES)
	sintLabelOffset(nLevel)		= LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_OFFSET)
'	intLabelsMax(nLevel)		= LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_MAX)
	bLabelPartial				= LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_PARTIALSEGS)
	sintLabelOrientation(nLevel)	= LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_ORIENTATION)
	sintLabelAlpha(nLevel)		= LayerInfo(intMapID,intLayerID,LAYER_INFO_LABEL_ALPHA)
	bLabelAutoDisplay			= LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_AUTODISPLAY) ' whether label is turned on in layer control
	bLabelRetry				= LayerInfo(intMapID,intLayerID,LAYER_INFO_LABEL_POS_RETRY)
	bLabelOverlap				= LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_OVERLAP)
	strCurLabelPen				= LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_LINE_PEN)
	bLabelAutoPos				= LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_AUTO_POSITION)
	strLabelAutoSize(nLevel)		= Str$(LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_AUTO_SIZES))
	bLabelSupress				= LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_SUPPRESS_IF_NO_FIT)
	sintAutoSizeStep(nLevel)		= LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_AUTO_SIZE_STEP)
'	bLabelCurved				= LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_CURVED_BEST_POSITION)
	bLabelCurvedFallback		= LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_CURVED_FALLBACK)
	bLabelBestPosition			= LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_CURVED_BEST_POSITION)
	bLabelCallout				= LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_AUTO_CALLOUT)
	'sintLableOrder(nLevel)		= LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_ORDER)

	strLabelAbbrev(nLevel)		= IIf(bLabelUseAbbrev, "On", "Off")
	strLabelAutoDisplay(nLevel)	= IIf(bLabelAutoDisplay, "On", "Off") ' is layer on in layer control

	Do Case LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_VISIBILITY)
		Case 1
			strLabelVis(nLevel) = "OFF"
		Case 2
			strLabelVis(nLevel) = "Zoom ("+floLabelZoomMin+","+floLabelZoomMax+")"
		Case 3
			strLabelVis(nLevel) = "ON"
	End Case

	Do Case LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_LT)
		Case 0
			strLabelLine(nLevel) = "None"
		Case 1
			strLabelLine(nLevel) = "Simple " + strCurLabelPen
		Case 2
			strLabelLine(nLevel) = "Arrow " + strCurLabelPen
	End Case

	strLabelParallel(nLevel) = IIf(bLabelParallel, "On", "Off")

	Do Case LayerInfo(intMapID,intLayerID, LAYER_INFO_LBL_POS)
		Case 0
			strLabelPosition(nLevel) = "Center"
		Case 1
			strLabelPosition(nLevel) = "Above Left"
		Case 2
			strLabelPosition(nLevel) = "Above"
		Case 3
			strLabelPosition(nLevel) = "Above Right"
		Case 4
			strLabelPosition(nLevel) = "Left"
		Case 5
			strLabelPosition(nLevel) = "Right"
		Case 6
			strLabelPosition(nLevel) = "Below Left"
		Case 7
			strLabelPosition(nLevel) = "Below"
		Case 8
			strLabelPosition(nLevel) = "Below Right"
	End Case

	If bLabelOverlap = False and bLabelRetry = False Then
		strLabelRetry(nLevel) = "Auto Retry Off"
	End If
	If bLabelOverlap = False and bLabelRetry = True Then
		strLabelRetry(nLevel) = "Auto Retry On"
	End If
	If bLabelOverlap = True and bLabelRetry = False Then
		strLabelRetry(nLevel) = "Overlap On Auto Retry Off"
	End If

	strLabelDuplicates(nLevel)	= IIf(bLabelDuplicates, "On", "Off")
	strLabelPartial(nLevel)		= IIf(bLabelPartial, "On", "Off")

	Do Case sintLabelOrientation(nLevel)
		Case 0
			strLabelOrientation(nLevel)	= " Parallel Off"
		Case 1
			strLabelOrientation(nLevel)	= " Parallel On"
		Case 2
			strLabelOrientation(nLevel)	= " Follow Path"
			strLabelFallback(nLevel)		= IIf(bLabelCurvedFallback, "On", "Off")
			strLabelBestPosition(nLevel)	= IIf(bLabelBestPosition, "On", "Off")
	End Case

	' for regions only
	strLabelAutoPos(nLevel)	= IIf(bLabelAutoPos, "On", "Off")
	strLabelSurpress(nLevel)	= IIf(bLabelSupress, "On", "Off")
	strLabelCallout(nLevel)	= IIf(bLabelCallout, "On", "Off")

Exit Sub
'---------------------------
ErrorHandler:
	Note Error$()

End Sub

'########################################################################################
Sub UpdateStyleOverrideProperties(ByVal nLevel As Integer, ByVal intMapperID as integer, ByVal intLayerID as integer)

dim k as integer
dim strCMD, strCMD_1, strCMD_2, strCMD_3, strCMD_4 as string

OnError goto ErrorHandler

	Call PrintLog("     Updating Style Override for Mapper " + intMapperID + " Layer " + intLayerID, SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())

	If LayerInfo(intMapperID,intLayerID,LAYER_INFO_TYPE) = LAYER_INFO_TYPE_NORMAL Then	' For vector layers.

		strCMD = "Set Map Window "+intMapperID+" Layer "+intLayerID+" Display Global" ' turn style override on
		run command strCMD

		' set translucency and other non object style override settings
		strCMD = "Set Map Window "+intMapperID+" Layer "+intLayerID+" Alpha "+sintAlpha(nLevel) +" Centroids "+strCentroid(nLevel) +" Nodes "+strNodes(nLevel)+" Arrows "+strArrows(nLevel)
		run command strCMD

		' set object styles - Pen
		For k = 1 to sintPenCount(nLevel)
			If nLevel = 1 Then
				strCMD_1 = strCMD_1+ " "+strCurPen1(k)+", "
			Else
				strCMD_1 = strCMD_1+ " "+strCurPen2(k)+", "
			End If
		Next
		strCMD_1 = Left$(strCMD_1, len(strCMD_1)-2) ' trim off final comma ","

		' set object styles - Brush
		For k = 1 to sintBrushCount(nLevel)
			If nLevel = 1 Then
				strCMD_2 = strCMD_2+ " "+strCurBrush1(k)+", "
			Else
				strCMD_2 = strCMD_2+ " "+strCurBrush2(k)+", "
			End If
		Next
		strCMD_2 = Left$(strCMD_2, len(strCMD_2)-2) ' trim off final comma ","

		' set object styles - Line
		For k = 1 to sintLineCount(nLevel)
			If nLevel = 1 Then
				strCMD_3 = strCMD_3+ " "+strCurLine1(k)+", "
			Else
				strCMD_3 = strCMD_3+ " "+strCurLine2(k)+", "
			End If
		Next
		strCMD_3 = Left$(strCMD_3, len(strCMD_3)-2) ' trim off final comma ", "

		' set object styles - SYMBOL
		For k = 1 to sintPointCount(nLevel)
			If nLevel = 1 Then
				strCMD_4 = strCMD_4+ " "+strCurSymbol1(k)+", "
			Else
				strCMD_4 = strCMD_4+ " "+strCurSymbol2(k)+", "
			End If
		Next
		strCMD_4 = Left$(strCMD_4, len(strCMD_4)-2) ' trim off final comma ", "

		' Remove existing style override settings
		strCMD = "Set Map Window " + intMapperID + " Layer " + intLayerID + " Style Override Remove All"
		' Update new style override
		run command strCMD
		strCMD = "Set Map Window " + intMapperID + " Layer " + intLayerID
			+ " Global " + strCMD_1 + " Global " + strCMD_2
			+ " Global " + strCMD_3 + " Global " + strCMD_4
			+ " Global " + strCurFont(nLevel)
		run command strCMD
	Else
		strCMD = "Set Map Window " + intMapperID + " Layer " + intLayerID
			+ " Display Global contrast " + sintContrast(nLevel) + " brightness " + sintBrighness(nLevel)
			+ " alpha " + sintAlpha(nLevel) + " grayscale " + strGreyscale(nLevel)
		run command strCMD
	End If

	' Set display properties: 0 = layer display off, 1 = layer on with default style, 2 = layer on with display override, 3 = layer appears as thematic
	Do Case sintDisplay(nLevel)
		Case 1
			Set Map Window intMapperID Layer intLayerID Display Graphic  ' style override is off
		Case 2
			Set Map Window intMapperID Layer intLayerID Display Global  ' style override is on
	End Case

Exit Sub
'---------------------------
ErrorHandler:
	Call PrintLog(Err() & " " & Error$() & " Command: " & strCMD, SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
	Resume Next

End Sub

'########################################################################################
Sub UpdateLabelProperties(ByVal nLevel As Integer, ByVal intMapperID as integer, ByVal intLayerID as integer)

dim strCMD as string

OnError goto ErrorHandler

	Call PrintLog("     Updating Label Properties for Mapper " + intMapperID + " Layer " + intLayerID, SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())

	strCMD = "Set Map Window "+intMapperID+" Layer "+intLayerID+" Label With "+strLabelExpr(nLevel)+ " Abbreviation "+strLabelAbbrev(nLevel)+" Abbreviate with "+strLabelAbbrevExpr(nLevel)
	run command strCMD

	' set label position
	strCMD = "Set Map Window "+intMapperID+" Layer "+intLayerID+" Label Position "+strLabelPosition(nLevel)
	run command strCMD

	' set label advanced formating
	strCMD = "Set Map Window "+intMapperID+" Layer "+intLayerID+" Label Visibility "+strLabelVis(nLevel) +" "+ CurLabelFont(nLevel) + " Line "+strLabelLine(nLevel)+
		" Parallel "+strLabelParallel(nLevel)+ " Duplicates "+strLabelDuplicates(nLevel)+ " Offset "+sintLabelOffset(nLevel)+" PartialSegments "+strLabelPartial(nLevel)+
		" "+strLabelOrientation(nLevel)+ " Alpha "+sintLabelAlpha(nLevel)
	run command strCMD

	' Auto Retry and Overlap
	strCMD = "Set Map Window " +intMapperID + " Layer " + intLayerID + " Label " + strLabelRetry(nLevel)
	run command strCMD

	' Auto Position and AutoSize for Regions
	strCMD = "Set Map Window " + intMapperID + " Layer " + intLayerID
			+ " Label AutoPosition " + strLabelAutoPos(nLevel) + " Autosizes " + strLabelAutoSize(nLevel)
	run command strCMD

	strCMD = "Set Map Window " + intMapperID + " Layer " + intLayerID
			+ " Label SuppressIfNoFit " + strLabelSurpress(nLevel) + " AutoSizeStep " + sintAutoSizeStep(nLevel)
	run command strCMD

	strCMD = "Set Map Window " + intMapperID + " Layer " + intLayerID
			+ " Label AutoCallout " + strLabelCallout(nLevel)
	run command strCMD

	' for curved lines
	If sintLabelOrientation(nLevel) = 2 Then
		strCMD = "Set Map Window " + intMapperID + " Layer " + intLayerID
				+ " Label Follow Path Fallback " + strLabelFallback(nLevel) + " BestPosition " + strLabelBestPosition(nLevel)
		Run command strCMD
	End If

	' Auto Display - turned on in Layer Control
	strCMD = "Set Map Window " + intMapperID + " Layer " + intLayerID + " Label Auto " + strLabelAutoDisplay(nLevel)
	Run command strCMD

Exit Sub
'---------------------------
ErrorHandler:
	Call PrintLog(Err() & " " & Error$() & " Command: " & strCMD, SMPDLGAddLogToMessageWindow(), SMPDLGAddLogToLogFile())
	Resume Next

End Sub


'******************************************************************
'Function to replace spaces or dashes in a string with underscores
'******************************************************************
Function ChangeCharacters(ByVal sTheName As String) As String

 	Dim k as Integer
 	Dim sTemp as String

	For k = 1 To len(sTheName)
		If Mid$(sTheName,k,1) = " " Or Mid$(sTheName,k,1) = "-"  Then ' replace spaces, dashes
			sTemp = sTemp + "_"
		ElseIf Mid$(sTheName,k,1) = "(" Or Mid$(sTheName,k,1) = ")" Or Mid$(sTheName,k,1) = "." Then ' remove brackets, dots
			sTemp = sTemp
		Else ' don't change
			sTemp = sTemp + Mid$(sTheName,k,1)
		End If
	Next

	ChangeCharacters = sTemp

End Function


'******************************************************************
Sub PrintLog(	  ByVal strLog as string
			, ByVal bPrintToMessageWindow As Logical
			, ByVal bPrintToLogFile As Logical)

	If bPrintToMessageWindow Then
		Print Time(24) + ": " + strLog
	End If

OnError goto FileErr

	If bPrintToLogFile Then
		If msLogFile = "" Then
			msLogFile = SMSDLGGetOutputFolder() + "Map_Export_Log_" + CurDate() + "_" + Left$(Time(24),2) + Mid$(Time(24),4,2) + ".log"
		End If

		If NOT FileExists(msLogFile) Then
			Open File msLogFile for Output Access Write as #17
			Print "Logging to " + msLogFile
		Else
			Open File msLogFile for Append Access Write as #17
		End If

		If strLog <> "" Then
			Print #17, FormatDate$(CurDate()) + "  " + Time(24) + "      " + strLog
		Else
			Print #17, ""
		End If
		Close File #17
	End If

	Exit Sub
'--------------------
AfterFile:
	Exit Sub

FileErr:
	Resume AfterFile

End Sub

'Gives the name of the tool to be displayed in Tool manager
'*******************************************************************************
Function AddIn_Name() As String
	AddIn_Name = xProgram	' + " " + xVersion
End Function

' Gets the Description of tool added in Tool manager
'*******************************************************************************
Function AddIn_Description() As String
	AddIn_Description = "Batch create multiple maps based on an input table."
End Function

' Shows Version Information on hovering over the "Version" button of the tool in Tool manager
'*******************************************************************************
Function AddIn_Version() As String
	AddIn_Version = xVersion
End Function

' Associates a Icon with the tool loaded in Tool Manager
'*******************************************************************************
Function AddIn_ImageUri() As String
	AddIn_ImageUri = PATH_IMAGES + "SiteMapper_16.png"
End Function
'*******************************************************************************
Sub AddIn_Help
	Call FILELaunch(FILE_HELP)
End Sub

' Handles clicking on "About" button of the  tool in Tool manager
'*******************************************************************************
Sub AddIn_About

OnError GoTo ErrorOccured

	Dialog
     	Title xProgram + " Tool"
		Width 300
		Control StaticText
			Title  "The " + xProgram + " tool will batch create multiple maps based on an input table."
				+ chr$(13) + chr$(13) + xProgram + " " + xVersion
				+ chr$(13) + chr$(13) + "Developed by Kalu Ribush and Peter Horsbøll Møller"
			Position 10,10
			Width 280		Height 80

		Control OKButton
			Position 10,95

	Exit Sub
'-------------------------
ErrorOccured:
	Note Err() & " " & Error$() & " AddIn_About"

End Sub

' ######################################## Sub EndHandler ########################################
Sub EndHandler

	Onerror goto 0

	'Remove the SiteMapper tool from ribbon.
	Call RBNEndHandler

end sub


'**********************************************************************************************''
'**********************************************************************************************''
'Functions to get values from columns in tables


'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function MSFUNCGetSiteColumnValue(  ByVal sCol As String
							) As String

OnError GoTo ErrorOccured

	MSFUNCGetSiteColumnValue	= MSFUNCGetColumnValue(sCol, 1, FALSE)

	Exit Function
'-------------------------
ErrorOccured:
	Note Err() & " " & Error$() & " MSFUNCGetSiteColumnValue: Column: " & sCol

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function MSFUNCGetSiteColumnValueErr(  ByVal sCol As String
							) As String

OnError GoTo ErrorOccured

	MSFUNCGetSiteColumnValueErr	= MSFUNCGetColumnValue(sCol, 1, TRUE)

	Exit Function
'-------------------------
ErrorOccured:
	Note Err() & " " & Error$() & " MSFUNCGetSiteColumnValueErr: Column: " & sCol

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function MSFUNCGetColumnValue(  ByVal sCol As String
						, ByVal nRowID As Integer
						, ByVal bReturnError As Logical
						) As String

Dim	sTab As String

OnError GoTo ErrorOccured

	sTab 				= arrCurrentSiteTableName(1)
	MSFUNCGetColumnValue	= MSFUNCGetTableColumnValue(sTab, sCol, nRowID, bReturnError)

	Exit Function
'-------------------------
ErrorOccured:
	Note Err() & " " & Error$() & " MSFUNCGetColumnValue: Table " & sTab & " Column: " & sCol & " RowID: " & nRowID

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function MSFUNCGetTableColumnValue(  ByVal sTab As String
							, ByVal sCol As String
							, ByVal nRowID As Integer
							, ByVal bReturnError As Logical
							) As String

Dim	sValue As String,
	aCol As Alias,
	bCloseTable As Logical

OnError GoTo ErrorOccured

MSFUNCGetTableColumnValue = ""

	If sTab = "Selection" Then
		If SelectionInfo(SEL_INFO_NROWS) > 0 Then
			sTab		= SelectionInfo(SEL_INFO_SELNAME)
			bCloseTable	= TRUE
		Else
			If bReturnError Then
				MSFUNCGetTableColumnValue = "Error: Selection holds no records"
			End If
			Exit Function
		End If
	End If

	If NOT TABIsOpen(sTab) Then
		If bReturnError Then
			MSFUNCGetTableColumnValue = "Error: Table isn't open '" & sTab & "'"
		End If
		Exit Function
	ElseIf NOT COLExists(sTab, sCol) Then
		If bReturnError Then
			MSFUNCGetTableColumnValue = "Error: Table '" & sTab & "' hasn't this column '" & sCol & "'"
		End If
		Exit Function
	ElseIf nRowID > TableInfo(sTab, TAB_INFO_NROWS) Then
		If bReturnError Then
			MSFUNCGetTableColumnValue = "Error: RowID '" & FormatNumber$(nRowID) & "' is higher than number of records '" & FormatNumber$(TableInfo(sTab, TAB_INFO_NROWS)) & "'"
		End If
		Exit Function
	End If

	If nRowID > 0 Then
		Fetch Rec nRowID From sTab
	ElseIf EOT(sTab) Then
		If bReturnError Then
			MSFUNCGetTableColumnValue = "The cursor of the table '" & sTab & "' is at EOT"
		End If
		Exit Function
	End If

	aCol = sTab & "." & sCol

	Do Case ColumnInfo(sTab, sCol, COL_INFO_TYPE)
		Case COL_TYPE_CHAR
			sValue = aCol
		Case COL_TYPE_INTEGER, COL_TYPE_SMALLINT, COL_TYPE_LOGICAL, COL_TYPE_LARGEINT
			sValue = Str$(aCol)
		Case COL_TYPE_FLOAT, COL_TYPE_DECIMAL
			sValue = FormatNumber$(aCol)
		Case COL_TYPE_DATE
			If aCol Then
				sValue = FormatDate$(aCol)
			End If
		Case COL_TYPE_TIME
			If aCol Then
				sValue = FormatTime$(acol, "HH:mm:ss")
			End If
		Case COL_TYPE_DATETIME
			If aCol Then
				sValue = FormatDate$(aCol) & " " & FormatTime$(GetTime(acol), "HH:mm:ss")
			End If
	End Case

	If bCloseTable Then
		Close Table sTab
	End If
	MSFUNCGetTableColumnValue = sValue

	Exit Function
'-------------------------
ErrorOccured:
	Note Err() & " " & Error$() & " MSFUNCGetTableColumnValue: Table " & sTab & " Column: " & sCol & " RowID: " & nRowID

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function MSFUNCGetTableColumnNames(  ByVal sTab As String
							, ByVal bReturnError As Logical
							) As String

Dim	sValues, sCol As String,
	nCol As Integer,
	bCloseTable As Logical

OnError GoTo ErrorOccured

MSFUNCGetTableColumnNames = ""

	If sTab = "Selection" Then
		If SelectionInfo(SEL_INFO_NROWS) > 0 Then
			sTab		= SelectionInfo(SEL_INFO_SELNAME)
			bCloseTable	= TRUE
		Else
			If bReturnError Then
				MSFUNCGetTableColumnNames = "Error: Selection holds no records"
			End If
			Exit Function
		End If
	End If
	If NOT TABIsOpen(sTab) Then
		If bReturnError Then
			MSFUNCGetTableColumnNames = "Error: Table isn't open '" & sTab & "'"
		End If
		Exit Function
	End If

	For nCol = 1 To TableInfo(sTab, TAB_INFO_NCOLS)
		sCol	= ColumnInfo(sTab, "COL" + nCol, COL_INFO_NAME)

		If sValues = "" Then
			sValues = sCol & ":"
		Else
			sValues = sValues & Chr$(10) & sCol & ":"
		End If
	Next

	If bCloseTable Then
		Close Table sTab
	End If
	MSFUNCGetTableColumnNames = sValues

	Exit Function
'-------------------------
ErrorOccured:
	Note Err() & " " & Error$() & " MSFUNCGetTableColumnNames: Table " & sTab

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function MSFUNCGetTableColumnValues(	  ByVal sTab As String
							, ByVal nRowID As Integer
							, ByVal bReturnError As Logical
							) As String

Dim	sValues, sCol As String,
	nCol As Integer,
	bCloseTable As Logical

OnError GoTo ErrorOccured

MSFUNCGetTableColumnValues = ""

	If sTab = "Selection" Then
		If SelectionInfo(SEL_INFO_NROWS) > 0 Then
			sTab		= SelectionInfo(SEL_INFO_SELNAME)
			bCloseTable	= TRUE
		Else
			If bReturnError Then
				MSFUNCGetTableColumnValues = "Error: Selection holds no records"
			End If
			Exit Function
		End If
	End If
	If NOT TABIsOpen(sTab) Then
		If bReturnError Then
			MSFUNCGetTableColumnValues = "Error: Table isn't open '" & sTab & "'"
		End If
		Exit Function
	ElseIf nRowID > TableInfo(sTab, TAB_INFO_NROWS) Then
		If bReturnError Then
			MSFUNCGetTableColumnValues = "Error: RowID '" & FormatNumber$(nRowID) & "' is higher than number of records '" & FormatNumber$(TableInfo(sTab, TAB_INFO_NROWS)) & "'"
		End If
		Exit Function
	End If

	If nRowID > 0 Then
		Fetch Rec nRowID From sTab
	ElseIf EOT(sTab) Then
		If bReturnError Then
			MSFUNCGetTableColumnValues = "The cursor of the table '" & sTab & "' is at EOT"
		End If
		Exit Function
	End If

	For nCol = 1 To TableInfo(sTab, TAB_INFO_NCOLS)
		sCol	= ColumnInfo(sTab, "COL" + nCol, COL_INFO_NAME)

		If sValues = "" Then
			sValues = MSFUNCGetTableColumnValue(sTab, sCol, nRowID, bReturnError)
		Else
			sValues = sValues & Chr$(10) & MSFUNCGetTableColumnValue(sTab, sCol, nRowID, bReturnError)
		End If
	Next

	If bCloseTable Then
		Close Table sTab
	End If
	MSFUNCGetTableColumnValues = sValues

	Exit Function
'-------------------------
ErrorOccured:
	Note Err() & " " & Error$() & " MSFUNCGetTableColumnValues: Table " & sTab & " RowID: " & nRowID

End Function


'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function MSFUNCGetTableColumnNameValues(  ByVal sTab As String
							, ByVal nRowID As Integer
							, ByVal bReturnError As Logical
							) As String

Dim	sValues, sCol As String,
	nCol As Integer,
	bCloseTable As Logical

OnError GoTo ErrorOccured

MSFUNCGetTableColumnNameValues = ""

	If sTab = "Selection" Then
		If SelectionInfo(SEL_INFO_NROWS) > 0 Then
			sTab		= SelectionInfo(SEL_INFO_SELNAME)
			bCloseTable	= TRUE
		Else
			If bReturnError Then
				MSFUNCGetTableColumnNameValues = "Error: Selection holds no records"
			End If
			Exit Function
		End If
	End If
	If NOT TABIsOpen(sTab) Then
		If bReturnError Then
			MSFUNCGetTableColumnNameValues = "Error: Table isn't open '" & sTab & "'"
		End If
		Exit Function
	ElseIf nRowID > TableInfo(sTab, TAB_INFO_NROWS) Then
		If bReturnError Then
			MSFUNCGetTableColumnNameValues = "Error: RowID '" & FormatNumber$(nRowID) & "' is higher than number of records '" & FormatNumber$(TableInfo(sTab, TAB_INFO_NROWS)) & "'"
		End If
		Exit Function
	End If

	If nRowID > 0 Then
		Fetch Rec nRowID From sTab
	ElseIf EOT(sTab) Then
		If bReturnError Then
			MSFUNCGetTableColumnNameValues = "The cursor of the table '" & sTab & "' is at EOT"
		End If
		Exit Function
	End If

	For nCol = 1 To TableInfo(sTab, TAB_INFO_NCOLS)
		sCol	= ColumnInfo(sTab, "COL" + nCol, COL_INFO_NAME)

		If sValues = "" Then
			sValues = sCol & ":" & Chr$(9) & MSFUNCGetTableColumnValue(sTab, sCol, nRowID, bReturnError)
		Else
			sValues = sValues & Chr$(10) & sCol & ":" & Chr$(9) & MSFUNCGetTableColumnValue(sTab, sCol, nRowID, bReturnError)
		End If
	Next

	If bCloseTable Then
		Close Table sTab
	End If
	MSFUNCGetTableColumnNameValues = sValues

	Exit Function
'-------------------------
ErrorOccured:
	Note Err() & " " & Error$() & " MSFUNCGetTableColumnNameValues: Table " & sTab & " RowID: " & nRowID

End Function
