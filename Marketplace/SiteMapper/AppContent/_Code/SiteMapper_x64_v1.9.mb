'*********************************************************
'  Name:  Site Mapper
'
'  Description:
'  The purpose of this tool is to assist the user create multiple maps based on all the objects in a specified table - "Site" table.
'  For example, the user may want a map of each Local Government Area or a map centred on points in a study area.
'  The tool automatically saves each map as a PDF, JPG or PNG to a specified output folder.
'
'  Each map is based on a template Mapper window or Layout window. If the user chooses to only use a template Mapper window, then the
'  tool will export the template Mapper window. If the user chooses a template Layout window then the tool export the Layout window.
'
'  The tool saves each export with a filename based on a column in the site table.
'
'  Options include to add the object from the site table to the mapper and label the object. For example, the template may contain only road and rail
'  layers and the tool can add the Local Government Boundary as a layer and label it with the Local Government Area name.
'
'  If the Layout template contains a text object with the word "<Title>" in it then the tool will replace the string <Title> with the string value from
'  a column in the site table. For example, the Layout may have a text string saying "Road Network in <Title> Map". The tool will change this to say
'  "Road Network in City of Yarra Map" where "City of Yarra" is the Local Government Area name in the site table. The tool can change this to proper case if required.
'
'  When the tool clones the Mapper window, it pans the map to the location of each record in the site table.
'  It can either retain the current map zoom, zoom to a specified zoom width, or zoom to the full extent of the objects (for lines and polygons)
'
'
'  Kalu Ribush,
'  Created Sept 2013
'  Updated Nov 2017 for Windows 16.0
'  Updated April 2019 Version 1.6
'  Updated Feb 2020 Version 1.7 - added function to include other attribute values from columns using Text Frame Names
'  Updated March 2021 Version 1.8 - Some tidying up
'
'*********************************************************

include "MAPBASIC.DEF"
Include "IMapInfoPro.def"
Include "Enums.def"

Include "G:\TPP\Mapping\5 Tools\MapBasic\x64\Custom Apps\Library\DEBUGLib.def"
Include "G:\TPP\Mapping\5 Tools\MapBasic\x64\Custom Apps\Library\ERRORLib.def"
Include "G:\TPP\Mapping\5 Tools\MapBasic\x64\Custom Apps\Library\RIBBONLib.def"
Include "G:\TPP\Mapping\5 Tools\MapBasic\x64\Custom Apps\Library\ARRAYLib.def"

Define PATH_IMAGES	ApplicationDirectory$() & "_Icons\"
Define xProgram 		"Site Mapper"
Define xVersion 		"1.9"
Define xYear			"2021"

declare sub Main
declare sub OpenDialog
declare sub OpenTable
declare sub Popup1Handler
declare sub MapperLayoutPopupHandler
declare sub DialogHandler
'declare sub LayoutTitleHandler
declare sub ZoomDontChangeHandler
declare sub SelectColumnHandler
declare sub UpdatePopupWithMapperLayoutNames
declare sub GetLayerListForSelectedMapper
declare sub GetLayerListForSelectedLayout
declare sub AddSiteLayerHandler
declare sub PDFCheckboxHandler
declare sub JPGCheckboxHandler
declare sub PNGCheckboxHandler
declare sub handlerDelay
declare sub DelayAbout
declare sub CloseDialog

Declare Sub GetStyleOverrideProperties(intMapID as integer, intLayerID as integer)
Declare Sub UpdateStyleOverrideProperties(intMapperID as integer,intLayerID as integer)
Declare Sub GetLabelProperties(intMapID as integer, intLayerID as integer)
Declare Sub UpdateLabelProperties(intMapperID as integer, intLayerID as integer)

Declare Function ChangeCharacters(ByVal sTheName As String) As String
Declare Sub PrintLog(ByVal strLog as string)

Declare Sub Sleep Lib "kernel32" Alias "Sleep" (ByVal dwMilliseconds As Integer)

Declare Sub MENUBrowserFolder

Declare Method FILEBrowseForFolder
	Class "FILELib.MIController"  Lib "FILELib.dll" Alias "BrowseForFolder"
	(ByVal sDescription As String	'Text to display in the dialog
		, ByVal sFolder As String		'Start folder to use in the dialog
		) As String

Declare Sub AddIn_About
Declare Function AddIn_Name() As String
Declare Function AddIn_Description() As String
Declare Function AddIn_Version() As String
Declare Function AddIn_ImageUri() As String

Declare sub EndHandler

Global arrayListLayers(1) as string
Global intWindowType as integer
Global intSelectedSiteLayer as integer
Global floZoomWidth as float
Global bDontChangeZoom as logical
Global astrMapperNames(), astrLayoutNames() as string ' map and layout names
Global aintMapperIDs(), aintLayoutIDs() as integer ' map and layout names
Global intLayouts as integer
Global strSiteTab, arrayColumnsNames(), arrayColumnsNamesUnique() as string
Global strOutputFolder as string
Global intImgResolution as integer
Global strLogFile as string
Global intDelayMillisecs as string
Global bAddDelay as logical

' Style Override Properties
Global sintLineCount, sintPenCount, sintBrushCount, sintFontCount, sintPointCount, sintDisplay, sintAlpha, sintBrighness, sintContrast as smallint
Global curLine() as Pen Global curBrush() as Brush Global curSymbol() as Symbol
Global strArrows, strNodes, strCentroid, strCurLine(), strCurSymbol(), strCurPen(), strCurBrush(), strCurFont as string
Global CurFont as Font Global curPen() as Pen

' Label Properties
Global sintLabelVis, sintLabelLine, sintLabelPosition, sintLabelOffset, sintLabelOrientation, sintLableOrder, sintAutoSizeStep, sintLabelAlpha as smallint
Global intLabelsMax as integer
Global floLabelZoomMin, floLabelZoomMax as float
Global astrPDFNames(), strLabelExpr, strCurLabelPen, strLabelAutoDisplay, strLabelVis, strLabelLine, strLabelParallel, strLabelPosition, strLabelOverlap, strLabelDuplicates, 
	strLabelOrientation, strLabelPartial, strLabelRetry, strLabelAutoPos, strLabelAutoSize, strLabelSurpress, strLabelRegion, 
	strLabelBestPosition, strLabelFallback, strLabelAbbrev, strLabelAbbrevExpr, strLabelCallout, strLabelCurFont as string
Global bLabelParallel, bLabelOverlap, bLabelDuplicates, bLabelPartial, bLabelAutoDisplay, bLabelRetry, bLabelAutoPos, 
	bLabelAutoSize, bLabelSupress, bLabelCurved, bLabelCurvedFallback, bLabelBestPosition, bLabelUseAbbrev, bLabelCallout, bGreyscale as logical
Global CurLabelFont as Font Global curLabelPen() as Pen



'*******************************************************************************
'MAIN PROCEDURE
'*******************************************************************************
Sub Main


	Dim	nCtrlIdx As Integer
	Dim sTabName as string
	
	' SET PDF Driver NAMES here
	Redim astrPDFNames(3)
	astrPDFNames(1) = "MapInfo PDF Printer Driver"
	astrPDFNames(2) = "Microsoft Print to PDF"
	astrPDFNames(3) = "Adobe PDF"

	print "Loading "+xProgram+" for Ribbon interface"
	Call RBNNotificationShow(xProgram,"Loading "+xProgram+" "+xVersion, Notify_Info, 2000)

	'**Checking for the existence of a TAB named HANDY TOOLS
	sTabName	= "tabHandyTools"
	If NOT RBNTabExists(sTabName) Then
		'**Adding the TAB named tabHandyTools with the caption of HANDY TOOLS
		'**nCtrlIdx is a reference to the element in the RibbonLib
		nCtrlIdx	= RBNAddTab(sTabName, "HANDY TOOLS", "H")
		If NOT nCtrlIdx > 0 Then
			Exit Sub
		End If
	End If

	'**Checking for the existence of a Group named Tools
	' ##################################### Group TOOLS #####################################
	If NOT RBNTabGroupExists(sTabName, "groupTools") Then
		nCtrlIdx = RBNTabAddGroup("groupTools", "Tools", sTabName)  '(sGroupName,sCaption,sTabName)
		If NOT nCtrlIdx > 0 Then
			Exit Sub
		End If
	End If

	nCtrlIdx = RBNGroupAddControl("butSiteMapper", xProgram, "", ControlType_Button, "tabHandyTools", "groupTools")
	If nCtrlIdx > 0 Then
		'Create & Set the button tooltip
		Call RBNControlSetToolTipIdx(nCtrlIdx, xProgram+" "+xVersion, "Batch create and export multiple maps based on an input table", "")
		'Set the button icon
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, "", PATH_IMAGES & "SiteMapper_32.PNG")
		'Set Custom MapBasic Handle to the button
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "OpenDialog")
	End If

End Sub

'*******************************************************************************
' OpenDialog PROCEDURE
'*******************************************************************************
sub OpenDialog

	dim i, j, intMappers as integer

	ReDim astrMapperNames(0)
	ReDim astrLayoutNames(0)
	ReDim aintMapperIDs(0)
	ReDim aintLayoutIDs(0)

	intLayouts = 0
	intMappers = 0

	' get names and IDs of mappers and layouts
	For i = 1 to NumWindows()

		If WindowInfo(i,WIN_INFO_TYPE) = WIN_MAPPER then
			intMappers = intMappers + 1
			ReDim astrMapperNames(intMappers)
			ReDim aintMapperIDs(intMappers)
			astrMapperNames(intMappers) = WindowInfo(i, WIN_INFO_NAME)
			aintMapperIDs(intMappers) = WindowInfo(i, WIN_INFO_WINDOWID)
			' print astrMapperNames(intMappers)
		ElseIf WindowInfo(i,WIN_INFO_TYPE) = WIN_LAYOUT_DESIGNER then
			intLayouts = intLayouts + 1
			ReDim astrLayoutNames(intLayouts)
			ReDim aintLayoutIDs(intLayouts)
			astrLayoutNames(intLayouts) = WindowInfo(i, WIN_INFO_NAME)
			aintLayoutIDs(intLayouts) = WindowInfo(i, WIN_INFO_WINDOWID)
			' print astrLayoutNames(intLayouts)
		End If
	Next

	If intMappers = 0 then
		Note "You must have at least one Mapper open to use this tool"
		Exit Sub 
	End If

	OnError goto 0

	floZoomWidth = 5.0 'sets default value for zoom width

	strOutputFolder = GetFolderPath$(FOLDER_MYDOCS)
	
	print "intWindowType "+intWindowType
	print "intSelectedSiteLayer "+intSelectedSiteLayer
	
	Dialog
		Title "Site Mapper - Batch Printing Tool"
			Width 360
			Calling DialogHandler
			
		Control GroupBox ' Pan and Zoom controls
			Title "Template Tindow"
			Position 5, 5
			Width 350
			Height 55
		Control StaticText
			Title "Export mapper or layout:"
			Position 11, 18
			Width 83
			ID 8
		Control PopupMenu
			Title "Mapper;Layout"
			Position 100, 17
			Width 50
			Calling MapperLayoutPopupHandler
			Value intWindowType
			ID 14
		Control StaticText
			Title "Select template window:" ' could be either mapper/layout
			Position 11, 30
			Width 100
		Control PopupMenu ' mapper or layout list
			Title ""
			Position 11, 41
			Width 125
			ID 15
			Value intSelectedSiteLayer
			Calling GetLayerListForSelectedMapper

		Control StaticText
			Title "Select the Mapper or Layout window which will be used as a template for the individual "+chr$(34)+
				"site"+chr$(34)+" maps.  This template window will then be cloned to produce the individual site maps."
			Position 185, 10
			Width 160 Height 70			

		Control GroupBox 
			Title "Sites Layer"
			Position 5, 65
			Width 350
			Height 86
		Control StaticText
			Position 11, 78
			Width 35
			Title "Site Layer:"
		Control PopupMenu
			ID 1
			Position 50,77
			width 110
			Calling SelectColumnHandler
		Control StaticText
			Position 11, 93
			Width 148
			Title "Add each site as new query layer in mapper:"
		Control Checkbox
			Position 160, 93
			ID 2
			Value 0
			Calling AddSiteLayerHandler
		Control StaticText
			Position 11, 106
			Width 148 Height 26
			Title "Use the style override and label properties of parent site layer (selected above) for the new child site layer:"
			ID 3
			Disable
		Control Checkbox
			Position 160, 106
			ID 4
			Value 0
			Disable
		Control StaticText
			Position 11, 135
			Width 148 Height 17
			Title "Turn off the parent layer (selected above):"
			ID 5
			Disable
		Control Checkbox
			Position 160, 135
			ID 6
			Value 1
			Disable
			
		Control StaticText
			Title "Select the "+chr$(34)+"parent"+chr$(34)+" site layer (from the Mapper or Layout specified above) which includes the "+chr$(34)+"child"+chr$(34)+" records which will be "+
				"used to generate each new map. Set the option to add each "+chr$(34)+"child"+chr$(34)+" site as a layer in each new map. The child site layer will be added at the same "+
				" position in the layer order as the parent layer. Set the option to replicate the style override symbology and label properties for the child layer as the parent layer."
			Position 185, 70
			Width 160  Height 95		

		Control GroupBox ' Pan and Zoom controls
			Title "Map Pan and Zoom Settings"
			Position 5, 155
			Width 350
			Height 45
		Control StaticText
			Title "Change site map extent to:"
			Position 11, 170
			Width 100
		Control PopupMenu
			Title "Centroid;Full Extent;Don't Change"
			Position 115, 169
			ID 10
			Calling Popup1Handler
		Control StaticText
			Title "Enter zoom width:"
			Position 11,185
			Width 58
			ID 9
		Control EditText
			Position 71, 184
			Width 20
			Value floZoomWidth
			ID 11
		Control StaticText
			Title "Km."
			Position 96,185

		Control StaticText
			Title "Current zoom:"
			Position 115, 185
			Width 48
		Control Checkbox
			Position 165, 184
			ID 60
			Value 0
			Calling ZoomDontChangeHandler
			
		Control StaticText
			Title "Specify how you want to change the map extent relative to each "+chr$(34)+"child"+chr$(34)+" site. Pan map to the centroid, full extent (for polygons/plines) or don't change at all."
			Position 185, 160
			Width 160  Height 40				

		Control Groupbox 'Output Settings
			Title "Output Settings"
			Position 5,202
			Width 350
			Height 113
		Control StaticText
			Title "Char column for export filename (must be unique):"
			Position 11, 213
			Width 180
			ID 27
		Control PopupMenu ' column names for Filename
			Position 11, 224
			Width 100
			Title ""
			ID 28
		Control StaticText
			Title "ProperCase:"
			Position 120, 225
		Control Checkbox
			Position 162, 225
			ID 35
			Value 0
		Control StaticText
			Title "Create JPG:"
			Position 11, 243
			Width 39
		Control Checkbox
			Position 54, 243
			ID 20
			Value 0
			Calling JPGCheckboxHandler
		Control StaticText
			Title "Create PNG:"
			Position 72, 243
			Width 39
		Control Checkbox
			Position 120, 243
			ID 25
			Value 0
			Calling PNGCheckboxHandler

		Control StaticText
			Title "Img. resolution:"
			Position 15,255
			Width 52
			ID 52
			Disable
		Control PopupMenu
			Title "96 dpi;150 dpi;300 dpi;600 dpi"
			Position 68,254
			Width 40
			ID 53
			Value 1
			Disable
		Control StaticText
			Title "Create PDF:"
			Position 11, 270
			Width 39
		Control Checkbox
			Position 54, 270
			ID 21
			Value 0
			Calling PDFCheckboxHandler
		Control StaticText
			Title "PDF driver:"
			Position 15,283
			Width 45
			ID 50
			Disable
		Control PopupMenu
			Title from variable astrPDFNames 
			Position 63,282
			Width 110
			ID 51
			Disable

		Control staticText
			Title "Output folder:"
			Position 10, 299
			Width 48
			ID 22
			Disable
		Control EditText 'output folder
			Value strOutputFolder
			into strOutputFolder
			Position 59, 298
			ID 23
			Width 232
			Height 12
			Disable
		Control button Title "..."
			ID 24
			position 293,298
			Width 16
			Height 13
			calling MENUBrowserFolder
			Disable
			
		Control StaticText
			Title "Specify which column from the site table to use to generate the output file name (the column must contain unique values so unique files are generated)."+chr$(13)+chr$(13)+ 
				"Specify the file types to be exported. For JPG and PNG, you can also specify the image resolution. For PDF, you can specify the PDF Driver."+
				"Specify the folder where the output files will be saved."
			Position 185, 210
			Width 160  Height 80					

		' Control Groupbox 'Layout Settings
			' Title "Layout Text"
			' Position 5,329
			' Width 350
			' Height 70
		' Control Checkbox
			' ID 36
			' Position 11, 342
			' Value 0
			' Disable
			' Calling LayoutTitleHandler
		' Control StaticText
			' Title "Update title text frame on layout. Replace "+chr$(34)+"<Title>"+chr$(34)+" with column value:"
			' Position 26, 340
			' Height 17 Width 155
			' ID 29
			' Disable
		' Control PopupMenu ' column names for Title
			' Position 11, 361
			' Width 100
			' Title ""
			' ID 30
			' Disable
		' Control StaticText
			' Title "ProperCase:"
			' Position 119, 363
			' Width 43
			' ID 34
			' Disable
		' Control Checkbox
			' ID 32
			' Position 164, 363
			' Value 0
			' Disable
		
		Control StaticText
			Title "To add values from any column in the site table on the layout as text (such as the map title), add an "+
				"empty text frame on to the layout and then include the column number in the NAME for the text frame. "+
				"The column number must be in the format "+chr$(34)+"<COL#>"+chr$(34)+", where # is the column number (note "+
				chr$(34)+"<COL#>"+chr$(34)+" is case sensitive). For example the text frame name could be "+
				chr$(34)+"State of <COL5> Map"+chr$(34)+" and the text frame will be updated to "+chr$(34)+"State of New York Map"+chr$(34)+
				" if column 5 contains the value "+chr$(34)+"New York"+chr$(34)+". Note the text frame name is modified by right "+
				"clicking on the frame and selecting Frame Properties. Make sure the empty text frame is large enough to accommodate "+
				"the full text."
			Position 5, 320
			Width 350 height 60
			ID	56
			
		Control Checkbox
			ID 33
			Position 6, 387
			Width 10
			Title ""
			Value 1
			Calling handlerDelay
		Control StaticText
			Title "Close cloned mapper or layout window after exporting. Recommended if you are generating a large number of maps. "+
				"Untick if you want to keep the windows open."
			Position 25, 384
			Width 300 Height 18	

		' Buttons
		Control OKButton
			Position 5, 410
			ID 65
			calling OpenTable
			Disable
		Control Button
			Title "Close"
			Position 45, 410
			calling CloseDialog

		Control StaticText
			Title "Add delay before closing:"
			Position 200,410
			Width 83
			ID 54

		Control PopupMenu
			Title "None;1 secs;2 secs;3 secs"
			Position 285,410
			Width 40
			ID 55
			Value 2
		Control Button
			Title "?"
			Position 327, 409
			Width 15
			calling DelayAbout

end sub

'*******************************************************************************
'handlerDelay
'*******************************************************************************
sub handlerDelay

	If ReadControlValue(33) = 1 then
		alter Control 54 enable
		alter Control 55 enable
	Else
		alter Control 54 Disable
		alter Control 55 Disable
	End If

End sub
'*******************************************************************************
'Popup1Handler
'*******************************************************************************
sub Popup1Handler

	If ReadControlValue(10) = 1 then
		alter Control 9 enable
		alter Control 11 enable
		alter Control 60 enable
	Else
		alter Control 9 Disable
		alter Control 11 Disable
		alter Control 60 Disable
	End If

End sub

'*******************************************************************************
'AddSiteLayerHandler
'*******************************************************************************
sub AddSiteLayerHandler

	If ReadControlValue(2) = 1 then
		alter Control 3 enable
		alter Control 4 enable
		alter Control 5 enable
		alter Control 6 enable
	Else
		alter Control 3 Disable
		alter Control 4 Disable
		alter Control 5 Disable
		alter Control 6 Disable
	End If

End sub

'*******************************************************************************
'DelayAbout
'*******************************************************************************
sub DelayAbout

	Dialog
		Title "What's this"
			Width 200	Height 100

		Control StaticText
			Title "This control allows you to set a short delay"+chr$(13)+
			"before closing the Mapper/Layout window in order"+chr$(13)+
			"to prevent the window being closed by the tool"+chr$(13)+
			"before the PDF driver has finished exporting the map."+chr$(13)+
			"Use this setting if the tool appears to end prematurely."
			Position 10,10
			Width 185 Height 55

		Control OKButton
			Position 78, 70


End sub

'*******************************************************************************
'ZoomDontChangeHandler
'*******************************************************************************
sub ZoomDontChangeHandler

	If ReadControlValue(60) = 1 then
		alter Control 11 Disable
	Else
		alter Control 11 enable
	End If

End sub

'*******************************************************************************
'MapperLayoutPopupHandler Turn off controls for Layout options
'*******************************************************************************
sub MapperLayoutPopupHandler

	If ReadControlValue(14) = 1 then ' Map

'		alter Control 29 Disable  'layout settings
'		alter Control 36 Disable  'layout settings
		Alter Control 15 title from variable astrMapperNames() ' update popup with Mapper names
		
	'	call LayoutTitleHandler  
			
	ElseIf ReadControlValue(14) = 2 then ' Layout
'		alter Control 29 enable  'layout settings
'		alter Control 36 enable  'layout settings		
		Alter Control 15 title from variable astrLayoutNames() ' update popup with Layout names
		
	'	call LayoutTitleHandler
		
	End If
	
	Call UpdatePopupWithMapperLayoutNames

End sub

'*******************************************************************************
'LayoutTitleHandler Turn off controls for Layout options
' '*******************************************************************************
' sub LayoutTitleHandler

	' If ReadControlValue(36) = 0 then
		' alter Control 30 Disable
		' alter Control 32 Disable
		' alter Control 34 Disable
	' Else
		' alter Control 30 enable
		' alter Control 32 enable
		' alter Control 34 enable
	' End If

' End sub
'*******************************************************************************
'DialogHandler
'*******************************************************************************
sub DialogHandler

	If intLayouts = 0 Then ' If there are no Layout windows (only mappers) then 
		alter Control 8 Disable ' disable control text for mapper/layout (as only mappers)
		alter control 14 Value 1 ' Select Mapper from popup
		alter Control 14 Disable ' disable, as no layouts open
	'	alter Control 29 Disable
	'	alter Control 36 Disable
	'	call LayoutTitleHandler
	Else
		alter Control 8 enable
		alter Control 14 enable ' enable, as layouts exist
		alter control 14 Value 2 ' Select Layout from popup
	'	alter Control 29 enable
	'	alter Control 36 enable
	'	call LayoutTitleHandler
	End If

	Call UpdatePopupWithMapperLayoutNames
	CAll MapperLayoutPopupHandler
	Call SelectColumnHandler

End sub

'*******************************************************************************
'UpdatePopupWithMapperLayoutNames
'*******************************************************************************
sub UpdatePopupWithMapperLayoutNames

	If ReadControlValue(14) = 1 then ' Mapper Selected
		Alter control 1 title from variable astrMapperNames()
		Call GetLayerListForSelectedMapper
	Else ' Layout selected
		Alter control 1 title from variable astrLayoutNames()
		Call GetLayerListForSelectedLayout
	End If	

End Sub

'*******************************************************************************
'GetLayerListForSelectedMapper
'*******************************************************************************
sub GetLayerListForSelectedMapper

dim k, j, intNumberOfLayer, intSelectedMapperWinID as integer

	intSelectedMapperWinID = aintMapperIDs(ReadControlValue(15)) ' selected Mapper Window ID
	intNumberOfLayer = MapperInfo(intSelectedMapperWinID,MAPPER_INFO_LAYERS)

	redim arrayListLayers(intNumberOfLayer+1)

	arrayListLayers(1) = "- Select Layer -" ' first value in array is blank

	For k = 1 to intNumberOfLayer
		j = k+1
		arrayListLayers(j) = LayerInfo(intSelectedMapperWinID,k,LAYER_INFO_NAME)
	Next
	
	' update popup menu	with list of layers in Mapper
	Alter Control 1 Title from variable arrayListLayers()
	
End sub

'*******************************************************************************
'GetLayerListForSelectedLayout
'*******************************************************************************
sub GetLayerListForSelectedLayout

dim k, j, intNumberOfLayer, intSelectedMapperWinID, intSelectedLayoutWinID, intCountMapperFrames as integer
	
	intSelectedLayoutWinID = aintLayoutIDs(ReadControlValue(15))
				
	' loop through frames on Layout to find mapper frame ID
	For k = 1 to LayoutInfo(intSelectedLayoutWinID,LAYOUT_INFO_NUM_ITEMS)
		If LayoutItemInfo(intSelectedLayoutWinID,k,LAYOUT_ITEM_INFO_TYPE) = LAYOUT_ITEM_TYPE_MAPPER then
			intSelectedMapperWinID = LayoutItemInfo(intSelectedLayoutWinID,k,LAYOUT_ITEM_INFO_WIN) 'get mapper frame id
			intCountMapperFrames = intCountMapperFrames+1
		End If
	Next
	
	If intCountMapperFrames = 0 then ' No mapper frame found on the Layout
		Note "No mapper frame found on layout window "+chr$(34)+WindowInfo(intSelectedLayoutWinID,WIN_INFO_NAME)+chr$(34)+". Please fix or choose a different Layout Window"
		Alter control 14 value 1 ' change mapper/layout popup back to Mapper
		Call MapperLayoutPopupHandler 
		exit sub
	ElseIf intCountMapperFrames > 1 then ' more than one mapper frame - problem
		Note "More than one mapper frame found on layout window "+chr$(34)+WindowInfo(intSelectedLayoutWinID,WIN_INFO_NAME)+chr$(34)+". Please fix or choose a different Layout Window"
		Alter control 14 value 1 ' change mapper/layout popup back to Mapper
		Call MapperLayoutPopupHandler 
		exit sub
	End If
	
	intNumberOfLayer = MapperInfo(intSelectedMapperWinID,MAPPER_INFO_LAYERS)

	redim arrayListLayers(intNumberOfLayer+1)

	arrayListLayers(1) = "- Select Layer -" ' first value in array is blank

	For k = 1 to intNumberOfLayer
		j = k+1
		arrayListLayers(j) = LayerInfo(intSelectedMapperWinID,k,LAYER_INFO_NAME)
	Next
	
	' update popup menu	with list of layers in Layout
	Alter Control 1 Title from variable arrayListLayers()
	
End sub

'*******************************************************************************
'PNGCheckboxHandler
'*******************************************************************************
sub PNGCheckboxHandler

	If ReadControlValue(25) = 0 then
		alter Control 52 Disable
		alter Control 53 Disable
	ElseIf ReadControlValue(25) = 1 then
		alter Control 52 enable
		alter Control 53 enable
		alter Control 22 enable
		alter Control 23 enable
		alter Control 24 enable
	End If

'	If ReadControlValue(19) = 0 and ReadControlValue(20) = 0 and ReadControlValue(21) = 0 and ReadControlValue(25) = 0 then 'if all checkboxes unticked
	If ReadControlValue(20) = 0 and ReadControlValue(21) = 0 and ReadControlValue(25) = 0 then 'if all checkboxes unticked
		alter Control 22 Disable
		alter Control 23 Disable
		alter Control 24 Disable
	End If

End sub

'*******************************************************************************
'JPGCheckboxHandler
'*******************************************************************************
sub JPGCheckboxHandler

	If ReadControlValue(20) = 0 then
		alter Control 52 Disable
		alter Control 53 Disable
	ElseIf ReadControlValue(20) = 1 then
		alter Control 52 enable
		alter Control 53 enable
		alter Control 22 enable
		alter Control 23 enable
		alter Control 24 enable
	End If

'	If ReadControlValue(19) = 0 and ReadControlValue(20) = 0 and ReadControlValue(21) = 0 then 'if all checkboxes unticked
	If ReadControlValue(20) = 0 and ReadControlValue(21) = 0 then 'if all checkboxes unticked
		alter Control 22 Disable
		alter Control 23 Disable
		alter Control 24 Disable
	End If

End sub

'*******************************************************************************
'PDFCheckboxHandler
'*******************************************************************************
sub PDFCheckboxHandler

	If ReadControlValue(21) = 0 then
		alter Control 50 Disable
		alter Control 51 Disable
	ElseIf ReadControlValue(21) = 1 then
		alter Control 50 enable
		alter Control 51 enable
		alter Control 22 enable
		alter Control 23 enable
		alter Control 24 enable
	End If

'	If ReadControlValue(19) = 0 and ReadControlValue(20) = 0 and ReadControlValue(21) = 0 then 'if all checkboxes unticked
	If ReadControlValue(20) = 0 and ReadControlValue(21) = 0 then 'if all checkboxes unticked
		alter Control 22 Disable
		alter Control 23 Disable
		alter Control 24 Disable
	End If

End sub


'*******************************************************************************
'SELECT COLUMN TO USE
'*******************************************************************************
sub SelectColumnHandler

dim intNumberColumns, c, d, e, intSumValue as integer
dim strColName, strCMD as string

	If ReadControlValue(1) > 1 then

		strSiteTab = arrayListLayers(ReadControlValue(1))
		intNumberColumns = NumCols(strSiteTab)
		'print "Checking table "+strSiteTab
		'print "Number of columns = "+intNumberColumns
		Redim arrayColumnsNames(0)
		Redim arrayColumnsNamesUnique(0)

		For c = 1 to intNumberColumns
			'print "Checking col "+c
			If ColumnInfo(strSiteTab,"Col"+c,COL_INFO_TYPE) = COL_TYPE_CHAR or
				ColumnInfo(strSiteTab,"Col"+c,COL_INFO_TYPE) = COL_TYPE_INTEGER or
				ColumnInfo(strSiteTab,"Col"+c,COL_INFO_TYPE) = COL_TYPE_SMALLINT or
				ColumnInfo(strSiteTab,"Col"+c,COL_INFO_TYPE) = COL_TYPE_DECIMAL or
				ColumnInfo(strSiteTab,"Col"+c,COL_INFO_TYPE) = COL_TYPE_FLOAT then
				strColName = ColumnInfo(strSiteTab,"Col"+c,COL_INFO_NAME)
				'print "strColName = "+strColName
				d = d +1
				Redim arrayColumnsNames(d)
				arrayColumnsNames(d)= strColName

				' get unique string column values for potential filenames
				If ColumnInfo(strSiteTab,"Col"+c,COL_INFO_TYPE) = COL_TYPE_CHAR then
					'Print "column "+c+", "+strColName+", is a character type"
					' Check if column contains unique Values
					strCMD = "Select "+strColName+", Count(*) from "+strSiteTab+" group by "+strColName+" order by "+strColName+" into q_Unique_Check_1"
					run command strCMD
					strCMD = "Select Sum(Col2) from q_Unique_Check_1 into q_Unique_Check_2"
					run command strCMD
					Fetch rec 1 from q_Unique_Check_2
					intSumValue = q_Unique_Check_2.col1
					'print "intSumValue = "+intSumValue
					If TableInfo(q_Unique_Check_1,TAB_INFO_NROWS) = intSumValue Then
						'print "Column "+c+" is unique."
						e = e+1
						Redim arrayColumnsNamesUnique(e)
						arrayColumnsNamesUnique(e)= strColName
					Else
						'print "Column "+c+" is NOT unique."
					End If
					close table q_Unique_Check_1
				End If
			End If
		Next

		If UBound(arrayColumnsNamesUnique()) > 0 then
			alter control 28 Title from variable arrayColumnsNamesUnique()
			alter Control 65 enable
		Else
			alter Control 65 disable
			Note strSiteTab+" Does not contain any character fields with unique values. Please ensure table has at least one character column with unique values."
		End If

		'alter control 30 Title from variable arrayColumnsNames()
		'alter control 41 Title from variable arrayColumnsNames()

	End If

end sub


'*******************************************************************************
'Open Table Procedure
'*******************************************************************************
sub OpenTable

	dim i, k, intCount as smallint
	dim logAddSelectionAsLayer, logStyleOverrideSiteObject, logTurnOffOrigSiteLayer, logWinTitleAndFileNameProperCase, logUpdateLayoutTitle, logMapExport, logPrintJPG, logPrintPNG,
		logPrintPDF, logLayoutTitleTextProperCase, logCloseWindows as logical
	dim intSelectedLayoutWinID, intSelectedMapperWinID, intSelectedColumnLayoutTitle, intSelectedColumnFilename, intCurrentMapperID, intCurrentLayoutID, intMapperFrameID, intLayerID as integer
	dim strMIVersion, strColumnValueTitle, strColumnValueFileName, strSelectedLayoutTitle, strSelectedMapperTitle as string
	dim strNewText, strColumnValueFileNameFix, strPDFDriver, strOrientation, strCMD, strTemp, strThisSite, strFoundText as string
	dim theObj, aRowID, aliasColumnValueTitle, aliasColumnValueFileName  as alias
	dim floColumnValue, floPageSize as float
	dim intPos as smallint

OnError goto ErrorHandler

' >>>>>>>>>>>>>>>>>> This section Reads Control Values <<<<<<<<<<<<<<<<<<<<
	
	' Read Control for Window Type
	intWindowType = ReadControlValue(14)
	
	'Read Control Value for Map or Layout Export
	If intWindowType = 1 then ' export Mapper ...
		logMapExport = True
	Else ' export Layout ...
		logMapExport = False
	End if

	intSelectedSiteLayer = ReadControlValue(15)

	'Read Control Values for which Map and Layout to Clone
	If logMapExport then 'if Mapper selected, get Mapper win title
		strSelectedMapperTitle = astrMapperNames(intSelectedSiteLayer)
	Else  'if Layout selected, get layout win title
		strSelectedLayoutTitle = astrLayoutNames(intSelectedSiteLayer)
	End If

	' Read control for Site Table
	strSiteTab = arrayListLayers(ReadControlValue(1))

	' Read Control Checkbox for adding selection as layer
	logAddSelectionAsLayer =  ReadControlValue(2)

	' Read Control Checkbox for style override and labeling site based on site layer
	logStyleOverrideSiteObject =  ReadControlValue(4)
	
	' Read Control Checkbox for turning off original layer
	logTurnOffOrigSiteLayer =  ReadControlValue(6)

	' Read Control for Zoom Width
	floZoomWidth = ReadControlValue(11)

	' Read Control for Don't change zoom
	bDontChangeZoom = ReadControlValue(60)

	print ""
	print "@-@-@-@-@-@-@-@-@"
	Call PrintLog("@-@-@-@-@-@-@-@-@")

	' check if mapper or layout export selected.  Check if Layout has a mapper frame. 
	If logMapExport then ' If Mapper being used as template then
		For i = 1 to NumWindows()
			If strSelectedMapperTitle = WindowInfo(i,WIN_INFO_NAME) and WindowInfo(i,WIN_INFO_TYPE) = WIN_MAPPER then
				intSelectedMapperWinID = WindowID(i)
				print "Selected Mapper ID = "+ intSelectedMapperWinID
				' Call PrintLog("Selected Mapper ID = "+ intSelectedMapperWinID)
			End If
		Next
	Else ' If Layout being used as template then
		For i = 1 to NumWindows()
			If strSelectedLayoutTitle = WindowInfo(i,WIN_INFO_NAME) and WindowInfo(i,WIN_INFO_TYPE) = WIN_LAYOUT_DESIGNER then
				intSelectedLayoutWinID = WindowID(i)
				print "Selected Layout ID = "+ intSelectedLayoutWinID
				' Call PrintLog("Selected Layout ID = "+ intSelectedLayoutWinID)
				' Check if only one mapper frame is on the Layout template ...
				intCount = 0
				For k = 1 to LayoutInfo(intSelectedLayoutWinID,LAYOUT_INFO_NUM_ITEMS) ' loop through frames to find mapper frames
					If LayoutItemInfo(intSelectedLayoutWinID,k,LAYOUT_ITEM_INFO_TYPE) = LAYOUT_ITEM_TYPE_MAPPER then
						intCount = intCount + 1
					End If
				Next
				If intCount = 0 then
					Note "No Map Frame found on Layout. This tool requies a single Map Frame on each Layout. Quitting."
					exit sub
				End If
				If intCount > 1 then
					Note "More than one Map Frame found on Layout. This tool requies a single Map Frame on each Layout. Quitting."
					exit sub
				End If			
			
			End If
		Next
	End If

	' Read Control Values for print JPG, PNG and PDF Checkboxes
	logPrintJPG = ReadControlValue(20)
	logPrintPNG = ReadControlValue(25)
	logPrintPDF = ReadControlValue(21)

	' check user has selected at least one export option
	If logPrintJPG = 0 and logPrintPNG = 0 and logPrintPDF = 0 then
		Note "No export options selected. Quitting."
		Exit Sub
	End If

	' Read Control Value for Output folder
	strOutputFolder = ReadControlValue(23)

	'check strOutputFolder has backslash on end
	If Right$(strOutputFolder,1) <> "\" then
		strOutputFolder = strOutputFolder+"\"
	End If

	' check if output folder valid
	If not FileExists(strOutputFolder) then
		Note "Output folder "+chr$(34)+strOutputFolder+chr$(34)+" does not appear to be valid. Please try again."
		Exit Sub
	End If

	' check if output folder valid
	If not len(strOutputFolder) > 3  then
		Note "Output folder "+chr$(34)+strOutputFolder+chr$(34)+" does not appear to be valid. Please try again."
		Exit Sub
	End If

	' Get current MapInfo version
	strMIVersion = format$(SystemInfo(SYS_INFO_MIVERSION)/100,",#.#")

	'Read Control Value for PDF Driver
	If ReadControlValue(51) = 1 then
		strPDFDriver = "MapInfo PDF Printer Version "+strMIVersion+" x64"
	ElseIf ReadControlValue(51) = 2 then
		strPDFDriver = "Adobe PDF"
	ElseIf ReadControlValue(51) = 3 then
		strPDFDriver = "PDF995"
	End if

	'Read Control Value for IMG Resolution
	If ReadControlValue(53) = 1 then
		intImgResolution = 96
	ElseIf ReadControlValue(53) = 2 then
		intImgResolution = 150
	ElseIf ReadControlValue(53) = 3 then
		intImgResolution = 300
	ElseIf ReadControlValue(53) = 4 then
		intImgResolution = 600
	End if

	' Read Control Value for Column Name for Filename (and cloned window title)
	intSelectedColumnFilename = ReadControlValue(28)

	' Read Control Value for Column Name for Layout Title
'	intSelectedColumnLayoutTitle = ReadControlValue(30)

	' Read Control Checkbox for updating Layout Title <TITLE>
'	logUpdateLayoutTitle =  ReadControlValue(36)

	' Read Control Checkbox for exporting output filename as ProperCase
	logWinTitleAndFileNameProperCase =  ReadControlValue(35)

	' Read Control Value for ProperCase for Layout <title> Text
	'logLayoutTitleTextProperCase = ReadControlValue(32)

	' Read Control Value for close Map and Layout after export
	logCloseWindows = ReadControlValue(33)

	'Read Control Value for delay
	If ReadControlValue(55) = 1 then
		intDelayMillisecs = 0
		bAddDelay = False
	ElseIf ReadControlValue(55) = 2 then
		bAddDelay = True
		intDelayMillisecs = 1000
	ElseIf ReadControlValue(55) = 3 then
		bAddDelay = True
		intDelayMillisecs = 2000
	ElseIf ReadControlValue(55) = 4 then
		bAddDelay = True
		intDelayMillisecs = 3000
	End if


' >>>>>>>>>>>>>>>>>> This section creates a Map and Optional Layout for each site <<<<<<<<<<<<<<<<<<<<

	'Check if values in column selected for Window Titles and Filename are unique ...
	aliasColumnValueFileName = strSiteTab+"."+arrayColumnsNamesUnique(intSelectedColumnFileName)

	' Select only records with map objects
	Select * from strSiteTab where obj order by aliasColumnValueFileName into selRecsToMap noselect

	If TableInfo(selRecsToMap,tab_info_nrows) = 0 then
		Note "No mappable objects in table. Quitting"
		exit sub
	End If

	' Check if user wants to proceed ...
	If not Ask("This process will create "+TableInfo(selRecsToMap,tab_info_nrows)+" maps"+chr$(10)+chr$(10)+"Are you sure you want to proceed?", "Yes", "No") then
		exit sub
	end if

	print "Creating maps for "+TableInfo(selRecsToMap,tab_info_nrows)+" sites."
	Call PrintLog("Creating maps for "+TableInfo(selRecsToMap,tab_info_nrows)+" sites.")
	
	' Get layer style override settings and label settings of site layer
	If logAddSelectionAsLayer then
	
		If logMapExport then  ' If template is a Mapper Window
			
			' Check if strSiteTab is in intSelectedMapperWinID
			For k = 1 to MapperInfo(intSelectedMapperWinID,MAPPER_INFO_LAYERS) 
				If LayerInfo(intSelectedMapperWinID,k,LAYER_INFO_NAME) = strSiteTab then
					intLayerID = k
					Exit for
				End If
			Next
			
		Else ' If template is a Layout Window
			
			' loop through frames on Layout to find mapper frame ID
			For k = 1 to LayoutInfo(intSelectedLayoutWinID,LAYOUT_INFO_NUM_ITEMS) 
				If LayoutItemInfo(intSelectedLayoutWinID,k,LAYOUT_ITEM_INFO_TYPE) = LAYOUT_ITEM_TYPE_MAPPER then
					intSelectedMapperWinID = LayoutItemInfo(intSelectedLayoutWinID,k,LAYOUT_ITEM_INFO_WIN) 'get mapper frame id
					'print "  Cloned Mapper ID = "+intSelectedMapperWinID
				End If
			Next
			
			' Check strSiteTab is in intSelectedMapperWinID
			For k = 1 to MapperInfo(intSelectedMapperWinID,MAPPER_INFO_LAYERS) 
				If LayerInfo(intSelectedMapperWinID,k,LAYER_INFO_NAME) = strSiteTab then
					intLayerID = k
					Exit for
				End If
			Next
			
		End If
		
		If intLayerID > 0 then
		
			If logStyleOverrideSiteObject then
				Call GetStyleOverrideProperties(intSelectedMapperWinID,intLayerID)
				Call GetLabelProperties(intSelectedMapperWinID,intLayerID)
			End If
			
			print "Site Layer "+StrSiteTab+" is in selected Mapper "+intSelectedMapperWinID+", position "+intLayerID	

		Else ' Should not happen, as site layer is selected from list of layers in the mappers/layouts
			Note "Site Layer "+strSiteTab+" not found in Mapper Window "+intSelectedMapperWinID
			Exit Sub
		End If
		
	End If

	' Create map for each row in table ...
	Fetch First from selRecsToMap
	Do Until EOT(selRecsToMap)

		OnError goto BadRecord

		aRowID	= selRecsToMap & ".ROWID"
		i		= aRowID

	   	' >>>> GET VALUE FROM COLUMN FOR WINDOW TITLE AND FILENAME
		If ColumnInfo(selRecsToMap,arrayColumnsNamesUnique(intSelectedColumnFileName),COL_INFO_TYPE) = COL_TYPE_CHAR then 'if column is a character column ...
			strColumnValueFileName = str$(aliasColumnValueFileName)
			' replace/remove spaces, brackets, etc
			strColumnValueFileName = ChangeCharacters(strColumnValueFileName)

		Else 'if column is not a character
			floColumnValue = aliasColumnValueFileName
			strColumnValueFileName = str$(floColumnValue)
			' replace/remove spaces, brackets, etc
			strColumnValueFileName = ChangeCharacters(strColumnValueFileName)
		End If

		' Get string for query name ...
		strColumnValueFileNameFix = ChangeCharacters(strColumnValueFileName) ' replace spaces in string with underscores
		strThisSite = "q_"+str$(left$(strColumnValueFileNameFix,24))

		theObj = selRecsToMap+".obj"

		' Run query to select site layer
		strCMD = "Select * from selRecsToMap where rowID = "+i+" into "+strThisSite+" noselect"
		run command strCMD

		print ""
		print "@-@-@-@-@-@-@-@-@"
		Call PrintLog("@-@-@-@-@-@-@-@-@")
		print "Processing map for Site "+ i+"."
		Call PrintLog("Processing map for Site "+ i+".")

		' >>>>>>  CLONE MAPPER SECTION ...

		If logMapExport then

			print "  Cloning the Mapper Window for Site "+i+"."
			Call PrintLog("  Cloning the Mapper Window for Site "+i+".")

			Run Command WindowInfo(intSelectedMapperWinID,15) 'Clone Window command, for selected Mapper

			intCurrentMapperID = FrontWindow()

			Set window intCurrentMapperID show ' show the new mapper window

			' Set Map Title
			If logWinTitleAndFileNameProperCase then ' if checkbox ticked to make propercase then ...
				print "  Set Mapper Window Title to " +"M_"+proper$(str$(left$(strColumnValueFileName,24)))+"."
				set window intCurrentMapperID title "M_"+Proper$(str$(left$(strColumnValueFileName,24)))
			Else ' don't change to proper case
				print "  Set Mapper Window Title to " +"M_"+str$(left$(strColumnValueFileName,24))+"."
				set window intCurrentMapperID title "M_"+str$(left$(strColumnValueFileName,24))
			End If

			set map Redraw off
			
			' If option set to turn off site layer, toggle off
			If logTurnOffOrigSiteLayer then
				Set Map Window intCurrentMapperID Layer intLayerID Display Off
			End If
			
			' Pan and Zoom Cloned Map ...
			If ReadControlValue(10) = 1 Then 'Set map centre to object centroid and zoom as specified by control
				print "  Panning map to Centroid of site "+ i+"."
				If logAddSelectionAsLayer then ' if option to add selection to mapper is checked then ...
					Add map window intCurrentMapperID layer strThisSite Position intLayerID ' add site query layer in, at position of site layer intLayerID
					If logStyleOverrideSiteObject then
						Call UpdateLabelProperties(intCurrentMapperID,intLayerID)
						Call UpdateStyleOverrideProperties(intCurrentMapperID,intLayerID)
					End If
				End If
				If bDontChangeZoom then
					set map window intCurrentMapperID Center(centroidX(theObj),centroidY(theObj))
				Else
					set map window intCurrentMapperID Center(centroidX(theObj),centroidY(theObj)) Zoom floZoomWidth Units "km"
				End If
			ElseIf ReadControlValue(10) = 2  then ' zoom map to extent of object
				print "  Zooming map to Full Extent of site "+ i+"."
				If logAddSelectionAsLayer then ' if option to add selection to mapper is checked then ...
					Add map window intCurrentMapperID layer strThisSite Position intLayerID ' add site query layer in, at position of site layer intLayerID
					If logStyleOverrideSiteObject then
						Call UpdateLabelProperties(intCurrentMapperID,intLayerID)
						Call UpdateStyleOverrideProperties(intCurrentMapperID,intLayerID)
					End If
					Set Map Window intCurrentMapperID Zoom entire layer strThisSite
				Else
					' Add to map at position 1, to zoom to, then remove
					Add map window intCurrentMapperID layer strThisSite Position 1 ' add layer at set position, so it can be removed
					Set Map Window intCurrentMapperID Zoom entire layer strThisSite
					Remove Map Window intCurrentMapperID Layer 1 ' remove site layer added
				End If
			ElseIf ReadControlValue(10) = 3 then ' do not change map extent
				print "  Not changing mapper extent."
				If logAddSelectionAsLayer then ' if option to add selection to mapper is checked then ...
					Add map window intCurrentMapperID layer strThisSite Position intLayerID ' add site query layer in, at position of site layer intLayerID
					If logStyleOverrideSiteObject then
						Call UpdateLabelProperties(intCurrentMapperID,intLayerID)
						Call UpdateStyleOverrideProperties(intCurrentMapperID,intLayerID)
					End If
				End If
			End If

			Set map redraw on

		End If

		' >>>>>>> CLONE LAYOUT SECTION ...   Clone Layout if option has been selected
		If not logMapExport then ' layout has been selected for cloning and export ...

			print "  Cloning the Layout Window for Site "+i+"."
			Call PrintLog("  Cloning the Layout Window for Site "+i+".")

			' clone front Layout
			Run Command WindowInfo(intSelectedLayoutWinID,WIN_INFO_CLONEWINDOW) 'Clone Window command, for selected Layout

			intCurrentLayoutID = frontwindow() ' new cloned window
			Set Window intCurrentLayoutID show ' show the new layout window

			' Set Layout Title
			If logWinTitleAndFileNameProperCase then ' if checkbox ticked to make propercase then ...
				print "  Set Layout Window Title to "+ Proper$(str$(left$(strColumnValueFileName,24)))+"."
				set window intCurrentLayoutID Title Proper$(str$(left$(strColumnValueFileName,24)))
			else ' don't change to proper case
				print "  Set Layout Window Title to "+ str$(left$(strColumnValueFileName,24))+"."
				set window intCurrentLayoutID Title str$(left$(strColumnValueFileName,24))
			End If

			' >>>>>  Get Mapper frame on Layout ID

			For k = 1 to LayoutInfo(intCurrentLayoutID,LAYOUT_INFO_NUM_ITEMS) ' loop through frames to find mapper frames
				If LayoutItemInfo(intCurrentLayoutID,k,LAYOUT_ITEM_INFO_TYPE) = LAYOUT_ITEM_TYPE_MAPPER then
					intMapperFrameID = LayoutItemInfo(intCurrentLayoutID,k,LAYOUT_ITEM_INFO_WIN) 'get mapper frame id
					'print "  Cloned Mapper ID = "+intMapperFrameID
				End If
			Next			
		
			' Pan and Zoom Mapper on Layout ...
			set map Redraw off
			
			' If option set to turn off site layer, toggle off
			If logTurnOffOrigSiteLayer then
				Set Map Window intMapperFrameID Layer intLayerID Display Off
			End If

			If ReadControlValue(10) = 1 Then 'Set map centre to object centroid and zoom as specified by control
				print "  Panning map window "+intMapperFrameID+" to Centroid of site "+ i+"."
				If logAddSelectionAsLayer then ' if option to add selection to mapper is checked then ...
					Add map window intMapperFrameID layer strThisSite Position intLayerID
					If logStyleOverrideSiteObject then
						Call UpdateLabelProperties(intMapperFrameID,intLayerID)
						Call UpdateStyleOverrideProperties(intMapperFrameID,intLayerID)
					End If
				End If
				If bDontChangeZoom then
					set map window intMapperFrameID Center (centroidX(theObj),centroidY(theObj))
				Else
					set map window intMapperFrameID Center (centroidX(theObj),centroidY(theObj)) Zoom floZoomWidth Units "km"
				End If
			ElseIf ReadControlValue(10) = 2  then ' zoom map to extent of object
				print "  Zooming map window "+intMapperFrameID+" to Full Extent of site "+ i+"."
				If logAddSelectionAsLayer then ' if option to add selection to mapper is checked then ...
					Add map window intMapperFrameID layer strThisSite Position intLayerID ' add site query layer in, at position of site layer intLayerID
					If logStyleOverrideSiteObject then
						Call UpdateLabelProperties(intMapperFrameID,intLayerID)
						Call UpdateStyleOverrideProperties(intMapperFrameID,intLayerID)
					End If
					Set Map Window intMapperFrameID Zoom entire layer strThisSite
				Else
					' Add to map at position 1, to zoom to, then remove
					Add map window intMapperFrameID layer strThisSite Position 1 ' add layer at set position, so it can be removed
					Set Map Window intMapperFrameID Zoom entire layer strThisSite
					Remove Map Window intMapperFrameID Layer 1 ' remove site layer added
				End If
				
			ElseIf ReadControlValue(10) = 3 then ' do not change map extent
				print "  Not changing mapper extent."
				If logAddSelectionAsLayer then ' if option to add selection to mapper is checked then ...
					Add map window intMapperFrameID layer strThisSite Position intLayerID ' add site query layer in, at position of site layer intLayerID
					If logStyleOverrideSiteObject then
						Call UpdateLabelProperties(intMapperFrameID,intLayerID)
						Call UpdateStyleOverrideProperties(intMapperFrameID,intLayerID)
					End If
				End If
			End If

			Set map redraw on

			' >>>>> REPLACE TITLE TEXT IN LAYOUT
			' If logUpdateLayoutTitle then

			   	' ' Get column value for Layout Title
				' aliasColumnValueTitle = selRecsToMap+"."+arrayColumnsNames(intSelectedColumnLayoutTitle)

				' If ColumnInfo(selRecsToMap,arrayColumnsNames(intSelectedColumnLayoutTitle),COL_INFO_TYPE) = COL_TYPE_CHAR then 'if column is a character column ...
					' If logLayoutTitleTextProperCase then ' make proper case if selected
						' strColumnValueTitle = proper$(str$(aliasColumnValueTitle)) 
					' Else
						' strColumnValueTitle = str$(aliasColumnValueTitle)
					' End If

					' If strColumnValueTitle = "" then 'if value in columm is empty then ...
						' strColumnValueTitle = str$(i)
					' End If
					' ' note strColumnValueTitle
				' Else 'if column is not a character
					' floColumnValue = aliasColumnValueTitle
					' strColumnValueTitle = str$(floColumnValue)
				' End If

				' ' alter layout title to text from column, do this by searching through frames on the layout window
				' ' and checking for text frames with content "<title>"
				' For k = 1 to LayoutInfo(intCurrentLayoutID,LAYOUT_INFO_NUM_ITEMS) ' loop through frames to find text frames and mapper frames

					' If LayoutItemInfo(intCurrentLayoutID,k,LAYOUT_ITEM_INFO_TYPE) = LAYOUT_ITEM_TYPE_TEXT then

						' intPos = 0 'reset

						' ' Get string of text object
						' strFoundText = ObjectInfo(LayoutItemInfo(intCurrentLayoutID,k, LAYOUT_ITEM_INFO_OBJ), OBJ_INFO_TEXTSTRING)

						' ' Check if found string contains string <TITLE>
						' If instr(1,strFoundText,"<TITLE>") > 0 then ' note case sensitive, so check variations
							' intPos = instr(1,strFoundText,"<TITLE>")
						' ElseIf instr(1,strFoundText,"<Title>") > 0 then ' note case sensitive, so check variations
							' intPos = instr(1,strFoundText,"<Title>")
						' ElseIf instr(1,strFoundText,"<title>") > 0 then ' note case sensitive, so check variations
							' intPos = instr(1,strFoundText,"<title>")
						' End If

						' ' now update string
						' If intPos > 0 then
							' ' new title sting = part before <title> + text from column + part after <title>
							' strNewText = Left$(strFoundText,intPos-1) + strColumnValueTitle + Right$(strFoundText,len(strFoundText)-intPos-6)
							' Alter Designer Text Window intCurrentLayoutID ID k Text strNewText

							' strTemp = "Updating layout title to "+chr$(34)+strNewText+chr$(34)+"."
							' print "  "+strTemp
							' Call Printlog(strTemp)
						' End If
						
					' End If

				' Next

			' End If
			
			' Loop through frames on layout to check for frames called COL1, COL2, etc
			
			For k = 1 to LayoutInfo(intCurrentLayoutID,LAYOUT_INFO_NUM_ITEMS) ' loop through frames to find text frames and mapper frames

				If LayoutItemInfo(intCurrentLayoutID,k,LAYOUT_ITEM_INFO_TYPE) = LAYOUT_ITEM_TYPE_TEXT then	' if text frame							
					
					dim strFrameName, strColumnNumber, strColumnValue as string 
					dim aliasColumnValue as alias
				
					strFrameName = LayoutItemInfo(intCurrentLayoutID,k,LAYOUT_ITEM_INFO_NAME)
					
					If instr(1,strFrameName,"<COL") > 0 AND instr(1,strFrameName,">") then
					
						dim intPos1, intPos2, intPos3 as smallint
					
						'get position of "<COL" to then get number after
						intPos1 = instr(1,strFrameName,"<COL")
						intPos2 = instr(1,strFrameName,">")
						
							' get column number
							
							strTemp = Right$(strFrameName,len(strFrameName)-intPos1-3)  ' Trim off right of string up to number
							intPos3 = instr(1,strTemp,">")
							strColumnNumber = Left$(strTemp,intPos3 - 1)  ' trim left, before the ">"
										
							' check strColumnNumber is a valid number
							If val(strColumnNumber) > 0 then
								
								' Check the column number exists
								If val(strColumnNumber) <= TableInfo(selRecsToMap,TAB_INFO_NCOLS) then
									
									' Get relevant column value from query
									aliasColumnValue = selRecsToMap+".COL"+strColumnNumber
									strColumnValue = str$(aliasColumnValue)
									'print "COL"+strColumnNumber+" = "+strColumnValue
										
									strNewText = Left$(strFrameName,intPos1-1)+aliasColumnValue+Right$(strFrameName,len(strFrameName)-intPos2)	
									Alter Designer Text Window intCurrentLayoutID ID k Text strNewText
									strTemp = "Updating Layout Frame to "+k+" "+chr$(34)+strNewText+chr$(34)+"."
									print "  "+strTemp
									Call Printlog(strTemp)
								
								Else
									print "Could not find "+"COL"+strColumnNumber
								End If
								
							End If

					End If
				
				End If
			
			Next


		Else
			' print "Not cloning layout"
		End If

		' Following commands make sure all labels draw on the exports
		If not logMapExport then
			set window intMapperFrameID front
			set window intCurrentLayoutID front
			set layout window intCurrentLayoutID extents to Fit
			Set Layout Frame Contents On
			Set Layout Selection Clear
		End If
		
		Call RBNNotificationShow(xProgram,"Exporting Layout Window "+WindowInfo(intCurrentLayoutID,WIN_INFO_NAME)+".",Notify_Info,1000)
		
		' >>>>>>>>>>>>>>>>>> This exports the MAPPER or LAYOUT to a PDF and/or JPG <<<<<<<<<<<<<<<<<<<<

		' >>>>>>> print PDF if checkbox is ticked ..
		If logPrintPDF then ' print MAP to PDF and JPG

			If logMapExport then ' Export MAPPER instead of LAYOUT ...

				print "  Exporting Mapper with PDF driver "+strPDFDriver+"."
				Call PrintLog("Exporting Map Window with PDF driver "+strPDFDriver+".")

				' get map page orientation
				If WindowInfo(intCurrentMapperID,WIN_INFO_PRINTER_ORIENT) = WIN_PRINTER_PORTRAIT then
					strOrientation = "Portrait"
				ElseIf WindowInfo(intCurrentMapperID,WIN_INFO_PRINTER_ORIENT) = WIN_PRINTER_LANDSCAPE then
					strOrientation = "Landscape"
				End If

				' Set which PDF driver to use and page orientation
				strCmd = "Set Window " + intCurrentMapperID + " Printer Name " +chr$(34)+ strPDFDriver +chr$(34)+ " Orientation "+strOrientation+" Copies 1 Papersize 9"
				' note strCmd
				Run Command strCmd

				' create strCmd to print map
				strCmd = "PrintWin Window " + intCurrentMapperID + " File " +chr$(34)+ strOutputFolder + WindowInfo(intCurrentMapperID,WIN_INFO_NAME)+".pdf" +chr$(34)+ " overwrite" ' prints directly to output folder and overwrites file
				run command strCmd

			Else  ' Export LAYOUT instead of MAPPER

				print "  Exporting Layout with PDF driver "+strPDFDriver+"."
				Call PrintLog("Exporting Layout Window with PDF driver "+strPDFDriver+".")
				' get layout page orientation
				If WindowInfo(intCurrentLayoutID,WIN_INFO_PRINTER_ORIENT) = 1 then ' portrait
					strOrientation = "Portrait"
				ElseIf WindowInfo(intCurrentLayoutID,WIN_INFO_PRINTER_ORIENT) = 2 then 'landscape
					strOrientation = "Landscape"
				End If

				' Get Layout page size
				floPageSize =  WindowInfo(intCurrentLayoutID,WIN_INFO_PRINTER_PAPERSIZE)
				
				'Call RBNNotificationShow(xProgram, "Exporting "+WindowInfo(intCurrentLayoutID,WIN_INFO_NAME)+".pdf"+"." , Notify_Info, 1000)

				' Set which PDF driver to use and page orientation
				strCmd = "Set Window " + intCurrentLayoutID + " Printer Name " +chr$(34)+ strPDFDriver +chr$(34)+ " Orientation "+strOrientation+" Copies 1 Papersize "+floPageSize
				'print strCMD
				Run Command strCmd

				strCmd = "PrintWin Window " + intCurrentLayoutID + " File " +chr$(34)+ strOutputFolder + WindowInfo(intCurrentLayoutID,WIN_INFO_NAME)+".pdf" +chr$(34)+ " overwrite" ' prints directly to output folder and overwrites file
				print strCMD
				run command strCmd

			End If
		Else
			'print "Not printing PDF."
		End If

		' >>>>>>>  Print JPG if checkbox is ticked ..
		If logPrintJPG then

			If logMapExport then 'Export MAPPER  ...

					print "  Exporting Mapper as JPG at "+ intImgResolution +"dpi to "+strOutputFolder+WindowInfo(intCurrentMapperID,WIN_INFO_NAME)+".jpg"
					'Call RBNNotificationShow(xProgram, "Exporting "+WindowInfo(intCurrentMapperID,WIN_INFO_NAME)+".png"+"." , Notify_Info, 1000)
					Call PrintLog("Exporting Mapper as JPG at "+ intImgResolution +"dpi to "+strOutputFolder+WindowInfo(intCurrentMapperID,WIN_INFO_NAME)+".jpg")
					Save Window intCurrentMapperID As strOutputFolder + WindowInfo(intCurrentMapperID,WIN_INFO_NAME) +".jpg" Type "JPEG" Resolution + intImgResolution

			Else 'Export LAYOUT  ...

					print "  Exporting Layout as JPG at "+ intImgResolution +"dpi to "+strOutputFolder+WindowInfo(intCurrentLayoutID,WIN_INFO_NAME)+".jpg"
					'Call RBNNotificationShow(xProgram, "Exporting "+WindowInfo(intCurrentLayoutID,WIN_INFO_NAME)+".png"+"." , Notify_Info, 1000)
					Call PrintLog("Exporting Layout as JPG at "+ intImgResolution +"dpi to "+strOutputFolder+WindowInfo(intCurrentLayoutID,WIN_INFO_NAME)+".jpg")
					Save Window intCurrentLayoutID As strOutputFolder + WindowInfo(intCurrentLayoutID,WIN_INFO_NAME) +".jpg" Type "JPEG" Resolution + intImgResolution

			End If
		Else
			'print "Not printing JPG."
		End If

		' >>>>>>>  Print PNG if checkbox is ticked ..
		If logPrintPNG then

			If logMapExport then 'Export MAPPER  ...				
				
					print "  Exporting Mapper as PNG at "+ intImgResolution +"dpi to "+strOutputFolder+WindowInfo(intCurrentMapperID,WIN_INFO_NAME)+".PNG"
					'Call RBNNotificationShow(xProgram, "Exporting "+WindowInfo(intCurrentMapperID,WIN_INFO_NAME)+".PNG"+"." , Notify_Info, 1000)
					Call PrintLog("Exporting Mapper as PNG at "+ intImgResolution +"dpi to "+strOutputFolder+WindowInfo(intCurrentMapperID,WIN_INFO_NAME)+".PNG")
					Save Window intCurrentMapperID As strOutputFolder + WindowInfo(intCurrentMapperID,WIN_INFO_NAME) +".PNG" Type "PNG" Resolution + intImgResolution

			Else 'Export LAYOUT  ...

					print "  Exporting Layout as PNG at "+ intImgResolution +"dpi to "+strOutputFolder+WindowInfo(intCurrentLayoutID,WIN_INFO_NAME)+".PNG"
					'Call RBNNotificationShow(xProgram, "Exporting "+WindowInfo(intCurrentLayoutID,WIN_INFO_NAME)+".PNG"+"." , Notify_Info, 1000)
					Call PrintLog("Exporting Layout as PNG at "+ intImgResolution +"dpi to "+strOutputFolder+WindowInfo(intCurrentLayoutID,WIN_INFO_NAME)+".PNG")
					Save Window intCurrentLayoutID As strOutputFolder + WindowInfo(intCurrentLayoutID,WIN_INFO_NAME) +".PNG" Type "PNG" Resolution + intImgResolution

			End If
		Else
			'print "Not printing PNG."
		End If

		Print "  Completed printing maps for site "+strColumnValueFileName
		Call PrintLog("Completed printing maps for site "+strColumnValueFileName)

		' >>>>>>>>>>> Close Mapper or Layout window if option ticked

		If logCloseWindows then
			
			If bAddDelay then
				Print "  Closing cloned windows after delay of "+intDelayMillisecs+" milliseconds."
				call PrintLog("Closing cloned windows after delay of "+intDelayMillisecs+" milliseconds.")
				' call sleep to allow window to complete exporting before closing window ... otherwise error
				'call PrintLog("Time A: "+ Time(24))
				Call Sleep(intDelayMillisecs) ' Call Sleep
				'call PrintLog("Time B: "+ Time(24))
			Else
				print "  Closing cloned window."
				call PrintLog("Closing cloned window.")
			End If

			If logMapExport then ' Mapper
				Close Window intCurrentMapperID  ' close Mapper window
			Else
				Close Window intCurrentLayoutID  ' close Layout window
			End If

			'close query table
			close Table strThisSite 
		Else
			' Print "  Not closing windows"
		End If

	skiptohere:

		Fetch Next From selRecsToMap
	Loop

	' close temp query
	close table selRecsToMap

	beep
	Call PrintLog("Finished Exporting all maps")
	'note "The program is finished"
	If Ask("Finished!"+chr$(13)+chr$(13)+"Open Log File?","Yes","No") then
		run program "notepad.exe " + strLogFile
	End If
	
Exit Sub
' ---------------------------
ErrorHandler:
	Note Error$()	
	
Exit Sub
' ---------------------------
BadRecord:
	print "Error with site "+i+". Skipping to next site."
	goto skiptohere

end sub

'******************************************************************************* 
Sub GetStyleOverrideProperties(intMapID as integer, intLayerID as integer)

dim i as integer

OnError goto ErrorHandler

	' Get style override and display status: 0 = layer display off, 1 = layer on with default style, 2 = layer on with display override, 3 = layer appears as thematic
	sintDisplay = LayerInfo(intMapID,intLayerID,LAYER_INFO_DISPLAY) 
	
	' get translucency settings for vector and image layers
	sintAlpha = LayerInfo(intMapID,intLayerID,LAYER_INFO_LAYER_ALPHA)
	'print "sintAlpha="+sintAlpha
	
	' Get brightness and contrast for image layers only
	'print "layer type "+ LayerInfo(intMapID,intLayerID,LAYER_INFO_TYPE) 
	If LayerInfo(intMapID,intLayerID,LAYER_INFO_TYPE) = Any(2,5,6) then ' LAYER_INFO_TYPE_IMAGE,  LAYER_INFO_TYPE_WMS, LAYER_INFO_TYPE_TILESERVER
		sintBrighness = LayerInfo(intMapID,intLayerID,LAYER_INFO_RASTER_BRIGHTNESS)
		'print "sintBrighness="+sintBrighness
		sintContrast = LayerInfo(intMapID,intLayerID,LAYER_INFO_RASTER_CONTRAST)
		'print "sintContrast="+sintContrast
		bGreyscale = LayerInfo(intMapID,intLayerID,LAYER_INFO_RASTER_GREYSCALE)
		'print "bGreyscale="+bGreyscale
	End If
	
	If LayerInfo(intMapID,intLayerID,LAYER_INFO_TYPE) = LAYER_INFO_TYPE_NORMAL then	' Only for vector layers. Will return error if WMS/WMTS/etc

		' count stacked style
		sintPointCount = LayerInfo(intMapID,intLayerID, LAYER_INFO_OVR_SYMBOL_COUNT) 
		'print "sintPointCount="+sintPointCount
		sintLineCount = LayerInfo(intMapID,intLayerID, LAYER_INFO_OVR_LINE_COUNT) 
		'print "sintLineCount="+sintLineCount
		sintPenCount = LayerInfo(intMapID,intLayerID, LAYER_INFO_OVR_PEN_COUNT) 
		'print "sintPenCount="+sintPenCount
		sintBrushCount = LayerInfo(intMapID,intLayerID, LAYER_INFO_OVR_BRUSH_COUNT) 
		'print "sintBrushCount="+sintBrushCount
		sintFontCount = LayerInfo(intMapID,intLayerID, LAYER_INFO_OVR_FONT_COUNT)  ' Will only be 1 stacked style for fonts in MapInfo 16.0
		'print "sintFontCount="+sintFontCount
	
		' Get Line Properties for style override
		If sintLineCount = 1 then
			redim curLine(1)
			redim strCurLine(1)
			curLine(1) = StyleOverrideInfo(intMapID,intLayerID,0,STYLE_OVR_INFO_LINE)
			strCurLine(1) = curLine(1)
			'print "strCurLine(1) = "+strCurLine(1)
			strCurLine(1) = "Line"+Right$(strCurLine(1),len(strCurLine(1))-3) ' change prefix "Pen" to "Line" 
			'print "strCurLine = "+strCurLine(1)
		ElseIf sintLineCount > 1 then 
			redim curLine(sintLineCount)
			redim strCurLine(sintLineCount)
			
			For i = 1 to sintLineCount
				curLine(i) = LayerStyleInfo(intMapID,intLayerID,0,i,STYLE_OVR_INFO_LINE)
				strCurLine(i) = curLine(i)
				strCurLine(i) = "Line"+Right$(strCurLine(i),len(strCurLine(i))-3) ' change prefix "Pen" to "Line" 
				'print "strCurLine("+i+") = "+strCurLine(i)
			Next
		End If
		
		' Get Symbol Properties for style override
		If sintPointCount = 1 then
			redim curSymbol(1)
			redim strCurSymbol(1)
			curSymbol(1) = StyleOverrideInfo(intMapID,intLayerID,0,STYLE_OVR_INFO_SYMBOL)
			strCurSymbol(1) = curSymbol(1)
			'print "strCurSymbol(1) = "+strCurSymbol(1)
		ElseIf sintPointCount > 1 then 
			redim curSymbol(sintPointCount)
			redim strCurSymbol(sintPointCount)
			For i = 1 to sintPointCount
				curSymbol(i) = LayerStyleInfo(intMapID,intLayerID,0,i,STYLE_OVR_INFO_SYMBOL)
				strCurSymbol(i) = curSymbol(i)
				'print "strCurSymbol("+i+") = "+strCurSymbol(i)
			Next
		End If
		
		' Get Pen Properties for style override
		If sintPenCount = 1 then
			redim curPen(1)
			redim strCurPen(1)
			curPen(1) = StyleOverrideInfo(intMapID, intLayerID, 0, STYLE_OVR_INFO_PEN)
			strCurPen(1) = curPen(1)
			'print "strCurPen(1) = "+strCurPen(1)
		ElseIf sintPenCount > 1 then 
			redim curPen(sintPenCount)
			redim strCurPen(sintPenCount)
			For i = 1 to sintPenCount
				curPen(i) = LayerStyleInfo(intMapID,intLayerID,0,i,STYLE_OVR_INFO_PEN)
				strCurPen(i)= curPen(i) 
				'print "strCurPen("+i+") = "+strCurPen(i)
			Next
		End If
		
		' Get BRUSH Properties for style override
		If sintBrushCount = 1 then
			redim curBrush(1)
			redim strCurBrush(1)
			curBrush(1) = StyleOverrideInfo(intMapID, intLayerID, 0, STYLE_OVR_INFO_BRUSH)
			strCurBrush(1) = curBrush(1)
			'print "curBrush = "+curBrush(1)
		ElseIf sintBrushCount > 1 then 
			redim curBrush(sintBrushCount)
			redim strCurBrush(sintBrushCount)
			For i = 1 to sintBrushCount
				curBrush(i) = LayerStyleInfo(intMapID,intLayerID,0,i,STYLE_OVR_INFO_BRUSH)
				strCurBrush(i) = curBrush(i)
				'print "strCurBrush("+i+") = "+strCurBrush(i)
			Next
		End If
		
		' Get Font Properties for style override
		' Note in MapInfo 16.0 only one stack for FONTS. So not an array
		curFont = StyleOverrideInfo(intMapID, intLayerID, 0, STYLE_OVR_INFO_FONT)
		strCurFont = curFont
		'print "strCurFont = "+strCurFont
			
		If StyleOverrideInfo(intMapID, intLayerID, 0, STYLE_OVR_INFO_ARROWS) then
			strArrows = "On"
		Else
			strArrows = "Off"
		End If	
		If StyleOverrideInfo(intMapID, intLayerID, 0, STYLE_OVR_INFO_NODES) then
			strNodes = "On"
		Else
			strNodes = "Off"
		End If
		If StyleOverrideInfo(intMapID, intLayerID, 0, STYLE_OVR_INFO_CENTROIDS) then
			strCentroid = "On"
		Else
			strCentroid = "Off"
		End If	
		
	End If
	
Exit Sub
'---------------------------
ErrorHandler:
	Note Error$()	
	
End Sub

'######################################################################################## 
Sub GetLabelProperties(intMapID as integer, intLayerID as integer)	

OnError goto ErrorHandler	

	sintLabelVis = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_VISIBILITY)
	floLabelZoomMin = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_ZOOM_MIN)
	floLabelZoomMax = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_ZOOM_MAX)
	strLabelExpr = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_EXPR)
	bLabelUseAbbrev = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_USE_ABBREVIATION)
	strLabelAbbrevExpr = LayerInfo(intMapID,intLayerID,LAYER_INFO_ABBREVIATION_EXPR)
	sintLabelLine = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_LT)
	CurLabelFont = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_FONT)
	bLabelParallel = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_PARALLEL)
	sintLabelPosition = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_POS)
	bLabelDuplicates = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_DUPLICATES)
	sintLabelOffset = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_OFFSET)
'	intLabelsMax = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_MAX)
	bLabelPartial = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_PARTIALSEGS)
	sintLabelOrientation = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_ORIENTATION)
	sintLabelAlpha = LayerInfo(intMapID,intLayerID,LAYER_INFO_LABEL_ALPHA)
	bLabelAutoDisplay = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_AUTODISPLAY) ' whether label is turned on in layer control
	bLabelRetry = LayerInfo(intMapID,intLayerID,LAYER_INFO_LABEL_POS_RETRY)
	bLabelOverlap = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_OVERLAP)
	strCurLabelPen = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_LINE_PEN)
	bLabelAutoPos = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_AUTO_POSITION)
	bLabelAutoSize = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_AUTO_SIZES)
	bLabelSupress = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_SUPPRESS_IF_NO_FIT)
	sintAutoSizeStep = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_AUTO_SIZE_STEP)
	bLabelCurved = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_CURVED_BEST_POSITION) 
	bLabelCurvedFallback = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_CURVED_FALLBACK)
	bLabelBestPosition = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_CURVED_BEST_POSITION)
	bLabelCallout = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_AUTO_CALLOUT)
	'sintLableOrder = LayerInfo(intMapID,intLayerID,LAYER_INFO_LBL_ORDER)
	
	If bLabelUseAbbrev then strLabelAbbrev = "On" Else strLabelAbbrev = "Off" End If
	
	If bLabelAutoDisplay then strLabelAutoDisplay = "On" Else strLabelAutoDisplay = "Off" End If		' is layer on in layer control 
		
	If sintLabelVis = 1 then
		strLabelVis = "OFF"
	ElseIf sintLabelVis = 2 then
		strLabelVis = "Zoom ("+floLabelZoomMin+","+floLabelZoomMax+")"
	ElseIf sintLabelVis = 3 then
		strLabelVis = "ON"
	End If		
	If sintLabelLine = 0 then
		strLabelLine = "None"
	ElseIf sintLabelLine = 1 then
		strLabelLine = "Simple "+strCurLabelPen
	ElseIf sintLabelLine = 2 then
		strLabelLine = "Arrow "+strCurLabelPen
	End If
	
	If bLabelParallel then strLabelParallel = "On" Else strLabelParallel = "Off" End If
	
	If sintLabelPosition = 0 then
		strLabelPosition = "Center"
	ElseIf sintLabelPosition = 1 then
		strLabelPosition = "Above Left"
	ElseIf sintLabelPosition = 2 then
		strLabelPosition = "Above"
	ElseIf sintLabelPosition = 3 then
		strLabelPosition = "Above Right"
	ElseIf sintLabelPosition = 4 then
		strLabelPosition = "Left"
	ElseIf sintLabelPosition = 5 then
		strLabelPosition = "Right"
	ElseIf sintLabelPosition = 6 then
		strLabelPosition = "Below Left"
	ElseIf sintLabelPosition = 7 then
		strLabelPosition = "Below"
	ElseIf sintLabelPosition = 8 then
		strLabelPosition = "Below Right"
	End If	
	
	If bLabelOverlap = False and bLabelRetry = False then
		strLabelRetry = "Auto Retry Off"
	End If	
	If bLabelOverlap = False and bLabelRetry = True then
		strLabelRetry = "Auto Retry On"
	End If
	If bLabelOverlap = True and bLabelRetry = False then
		strLabelRetry = "Overlap On Auto Retry Off"
	End If
			
	If bLabelDuplicates then strLabelDuplicates = "On" Else  strLabelDuplicates = "Off" End If	
	
	If bLabelPartial then strLabelPartial = "On" Else strLabelPartial = "Off" End If	
	
	If sintLabelOrientation = 0 then
		strLabelOrientation = " Parallel Off"
	ElseIf sintLabelOrientation = 1 then
		strLabelOrientation = " Parallel On"
	ElseIf sintLabelOrientation = 2 then
		strLabelOrientation = " Follow Path"
	End If
	
	' for regions only
	If bLabelAutoPos then strLabelAutoPos = "On" Else strLabelAutoPos = "Off" End If	
	If bLabelAutoSize then strLabelAutoSize = "1" Else strLabelAutoSize = "Default" End If		
	If bLabelSupress then strLabelSurpress = "On" Else strLabelSurpress = "Off" End If		
	If bLabelCallout then strLabelCallout = "On" Else strLabelCallout = "Off" End If		
	
	' for lines
	If sintLabelOrientation = 2 then
		If bLabelCurvedFallback then strLabelFallback = "On" Else strLabelFallback = "Off" End If
		If bLabelBestPosition then strLabelBestPosition = "On" Else strLabelBestPosition = "Off" End If
	End If	
	
Exit Sub
'---------------------------
ErrorHandler:
	Note Error$()	
	
End Sub

'######################################################################################## 
Sub UpdateStyleOverrideProperties(intMapperID as integer,intLayerID as integer)

dim k as integer 
dim strCMD, strCMD_1, strCMD_2, strCMD_3, strCMD_4, strGreyscale as string

OnError goto ErrorHandler

	print "Updating sytle override for Mapper "+intMapperID+" Layer "+intLayerID
	
	If LayerInfo(intMapperID,intLayerID,LAYER_INFO_TYPE) = LAYER_INFO_TYPE_NORMAL then	' For vector layers. 
		
		strCMD = "Set Map Window "+intMapperID+" Layer "+intLayerID+" Display Global" ' turn style override on
		'print strCMD
		run command strCMD
		
		' set translucency and other non object style override settings	
		strCMD = "Set Map Window "+intMapperID+" Layer "+intLayerID+" Alpha "+sintAlpha +" Centroids "+strCentroid +" Nodes "+strNodes+" Arrows "+strArrows
		'print strCMD
		run command strCMD
							
		' set object styles - Pen
		For k = 1 to sintPenCount
			strCMD_1 = strCMD_1+ " "+strCurPen(k)+", "
		Next
		strCMD_1 = Left$(strCMD_1, len(strCMD_1)-2) ' trim off final comma ","
		
		' set object styles - Brush
		For k = 1 to sintBrushCount
			strCMD_2 = strCMD_2+ " "+strCurBrush(k)+", "
		Next
		strCMD_2 = Left$(strCMD_2, len(strCMD_2)-2) ' trim off final comma ","
		
		' set object styles - Line
		For k = 1 to sintLineCount
			strCMD_3 = strCMD_3+ " "+strCurLine(k)+", "
		Next
		strCMD_3 = Left$(strCMD_3, len(strCMD_3)-2) ' trim off final comma ", "
		
		' set object styles - SYMBOL
		For k = 1 to sintPointCount
			'print "strCurSymbol("+k+") = "+strCurSymbol(k)
			strCMD_4 = strCMD_4+ " "+strCurSymbol(k)+", "
		Next
		strCMD_4 = Left$(strCMD_4, len(strCMD_4)-2) ' trim off final comma ", "
			
		' Remove existing style override settings
		strCMD = "Set Map Window "+intMapperID+" Layer "+intLayerID+" Style Override Remove All"
		' Update new style override
		run command strCMD
		strCMD = "Set Map Window "+intMapperID+" Layer "+intLayerID+" Global "+strCMD_1+" Global "+strCMD_2+" Global "+strCMD_3+" Global "+strCMD_4+" Global "+strCurFont
		'print strCMD
		run command strCMD
		
	Else
	
		if bGreyscale then
			strGreyscale = "On"
		Else
			strGreyscale = "Off"
		End If			
		
		strCMD = "Set Map Window "+intMapperID+" Layer "+intLayerID+" Display Global contrast "+sintContrast+" brightness "+sintBrighness+" alpha "+sintAlpha+" grayscale "+strGreyscale
		'print "StrCMD = "+strCMD
		
		run command strCMD	
		
	End If
	
	' Set display properties: 0 = layer display off, 1 = layer on with default style, 2 = layer on with display override, 3 = layer appears as thematic
	If sintDisplay = 1 then
		Set Map Window intMapperID Layer intLayerID Display Graphic  ' style override is off
	ElseIf sintDisplay = 2 then
		Set Map Window intMapperID Layer intLayerID Display Global  ' style override is on
	End If	

Exit Sub
'---------------------------
ErrorHandler:
	Note Error$()	
	
End Sub

'######################################################################################## 
Sub UpdateLabelProperties(intMapperID as integer,intLayerID as integer)

dim strCMD as string

OnError goto ErrorHandler

	print "Updating Label Properties for Mapper "+intMapperID+" Layer "+intLayerID

	strCMD = "Set Map Window "+intMapperID+" Layer "+intLayerID+" Label With "+strLabelExpr+ " Abbreviation "+strLabelAbbrev+" Abbreviate with "+strLabelAbbrevExpr
	run command strCMD
	
	' set label position
	strCMD = "Set Map Window "+intMapperID+" Layer "+intLayerID+" Label Position "+strLabelPosition
	run command strCMD
	
	' set label advanced formating
	strCMD = "Set Map Window "+intMapperID+" Layer "+intLayerID+" Label Visibility "+strLabelVis +" "+ CurLabelFont + " Line "+strLabelLine+
		" Parallel "+strLabelParallel+ " Duplicates "+strLabelDuplicates+ " Offset "+sintLabelOffset+" PartialSegments "+strLabelPartial+ 
		" "+strLabelOrientation+ " Alpha "+sintLabelAlpha
	run command strCMD
	
	' Auto Retry and Overlap
	strCMD = "Set Map Window "+intMapperID+" Layer "+intLayerID+" Label "+strLabelRetry
	run command strCMD
	
	' Auto Position and AutoSize for Regions
		strCMD = "Set Map Window "+intMapperID+" Layer "+intLayerID+" Label AutoPosition "+strLabelAutoPos +" Autosizes "+strLabelAutoSize+
			" SuppressIfNoFit "+strLabelSurpress+ " AutoSizeStep "+sintAutoSizeStep+ " AutoCallout "+strLabelCallout
		run command strCMD
	' for curved lines
	If sintLabelOrientation = 2 then
		strCMD = "Set Map Window "+intMapperID+" Layer "+intLayerID+" Label Follow Path Fallback "+strLabelFallback+" BestPosition "+strLabelBestPosition
		Run command strCMD
	End If
	
	' Auto Display - turned on in Layer Control
	strCMD = "Set Map Window "+intMapperID+" Layer "+intLayerID+" Label Auto "+strLabelAutoDisplay
	Run command strCMD
	
Exit Sub
'---------------------------
ErrorHandler:
	Note Error$()	
	
End Sub


'*******************************************************************************
'CloseDialog
'*******************************************************************************
sub CloseDialog

	intWindowType = readcontrolvalue(14) ' remember choice
	intSelectedSiteLayer = readcontrolvalue(15) ' remember choice

	Dialog Remove

end sub

'*******************************************************************************
'Browse Button PROCEDURE
'*******************************************************************************
Sub MENUBrowserFolder

	strOutputFolder = FILEBrowseForFolder("Output Folder",strOutputFolder)

	'check strOutputFolder has backslash on end
	If len(strOutputFolder)>1 then
		If Right$(strOutputFolder,1) <> "\" then
			strOutputFolder = strOutputFolder+"\"
		End If
	End If

	alter control 23 value strOutputFolder

End Sub

'******************************************************************
'Function to replace spaces or dashes in a string with underscores
'******************************************************************
Function ChangeCharacters(ByVal sTheName As String) As String

 	Dim k as Integer
 	Dim sTemp as String

	For k = 1 To len(sTheName)
		If Mid$(sTheName,k,1) = " " Or Mid$(sTheName,k,1) = "-"  Then ' replace spaces, dashes
			sTemp = sTemp + "_"
		ElseIf Mid$(sTheName,k,1) = "(" Or Mid$(sTheName,k,1) = ")" Or Mid$(sTheName,k,1) = "." Then ' remove brackets, dots
			sTemp = sTemp
		Else ' don't change
			sTemp = sTemp + Mid$(sTheName,k,1)
		End If
	Next

ChangeCharacters = sTemp

End Function


'******************************************************************
Sub PrintLog(ByVal strLog as string)

	If strLogFile = "" then
		strLogFile = strOutputFolder + "Map_Export_Log_" + CurDate() + "_" + Left$(Time(24),2) + Mid$(Time(24),4,2) + ".log"
	End If

	OnError goto FileErr

	If NOT FileExists(strLogFile) then
		Open File strLogFile for Output Access Write as #17
		Print chr$(10) + "Logging to " + strLogFile + chr$(10)
	Else
		Open File strLogFile for Append Access Write as #17
	End If

	If strLog <> "" then
		Print #17, FormatDate$(CurDate()) + "  " + Time(24) + "      " + strLog
	Else
		Print #17, ""
	End If
	Close File #17
	AfterFile:

Exit Sub

FileErr:
	Resume AfterFile

End Sub


'Gives the name of the tool to be displayed in Tool manager
'*******************************************************************************
Function AddIn_Name() As String
	AddIn_Name = xProgram+" "+xVersion
End Function

' Gets the Description of tool added in Tool manager
'*******************************************************************************
Function AddIn_Description() As String
	AddIn_Description = "Batch create multiple maps based on an input table."
End Function

' Shows Version Information on hovering over the "Version" button of the tool in Tool manager
'*******************************************************************************
Function AddIn_Version() As String
	AddIn_Version = xVersion
End Function

' Associates a Icon with the tool loaded in Tool Manager
'*******************************************************************************
Function AddIn_ImageUri() As String
	AddIn_ImageUri = PATH_IMAGES+"SiteMapper_16.png"
End Function

' Handles clicking on "About" button of the  tool in Tool manager
'*******************************************************************************
Sub AddIn_About
   Dialog
     Title xProgram+" Tool"
	 Width 300
   Control StaticText
     Title  "The "+xProgram+" will batch create multiple maps based on an input table."+chr$(13)+
		xVersion
     Position 10, 10
	 Height 35
   Control OKButton
	 Position 10, 50

End Sub

' ######################################## Sub EndHandler ########################################
Sub EndHandler

	Onerror goto 0

	'Remove the SiteMapper tool from ribbon.
	Call RBNEndHandler

end sub